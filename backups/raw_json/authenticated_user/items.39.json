[{"rendered_body":"\u003cp\u003eRuby on Railsを使ったウェブアプリケーションを開発していてテンプレートをHamlで書いています。\u003cbr\u003e\n今までi18nせずに日本語で書いていたテンプレートをi18nしたくなりました。\u003cbr\u003e\n\u003ca href=\"http://guides.rubyonrails.org/i18n.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eRails Internationalization (I18n) API\u003c/a\u003eを参考に、viewの中の日本語の文字列を\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/TranslationHelper.html#method-i-t\" rel=\"nofollow noopener\" target=\"_blank\"\u003e#t\u003c/a\u003eヘルパーを使って置き換えます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"継続的にi18nしたい\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B6%99%E7%B6%9A%E7%9A%84%E3%81%ABi18n%E3%81%97%E3%81%9F%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e継続的にi18nしたい\u003c/h2\u003e\n\n\u003cp\u003ei18nは一度全部置き換えただけでは終わりません。置き換えた後もテンプレートは書き換えられていきます。\u003cbr\u003e\nテンプレートに変更があってもi18nされた状態を維持したいです。\u003cbr\u003e\nコードレビューでi18nされているか確認することは出来ますが人間なので見落とします。\u003cbr\u003e\nなのでlintをかけます。\u003c/p\u003e\n\n\u003cp\u003elintをかけるためにhaml_i18n_lint gemを作りました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"haml_i18n_lintを使う\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#haml_i18n_lint%E3%82%92%E4%BD%BF%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ehaml_i18n_lintを使う\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/okinawarb/haml_i18n_lint\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehaml_i18n_lint\u003c/a\u003eを使うとhamlテンプレート中にi18nが必要な文字列が残されているか確認できます。使い方を説明します。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"インストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eインストール\u003c/h3\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% gem i haml_i18n_lint\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"実行\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実行\u003c/h3\u003e\n\n\u003cp\u003e何もオプションを指定せずに実行してみます。今回はmastodonに対して実行してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% ghq get tootsuite/mastodon\n% cd ~/src/github.com/tootsuite/mastodon\n% haml_i18n_lint\n\n\napp/views/kaminari/_prev_page.html.haml:9\n8:  %span.prev\n9:    = link_to_unless current_page.first?, safe_join([fa_icon('chevron-left'), t('pagination.prev')], ' '), url, rel: 'prev', remote: remote\n----------------\n\n\napp/views/kaminari/_next_page.html.haml:9\n8:  %span.next\n9:    = link_to_unless current_page.last?, safe_join([t('pagination.next'), fa_icon('chevron-right')], ' '), url, rel: 'next', remote: remote\n----------------\n\n\napp/views/authorize_follows/_card.html.haml:7\n6:      %span.display-name\n7:        = link_to TagManager.instance.url_for(account), class: 'detailed-status__display-name p-author h-card', target: '_blank', rel: 'noopener' do\n8:          %strong.emojify= display_name(account)\n----------------\n\n\napp/views/accounts/_header.html.haml:17\n16:        %span= \"@#{account.username}\"\n17:        = fa_icon('lock') if account.locked?\n18:    .details\n----------------\n\n\napp/views/accounts/_og.html.haml:1\n1:  %meta{ property: 'og:url', content: url }/\n2:  %meta{ property: 'og:site_name', content: site_title }/\n----------------\napp/views/accounts/_og.html.haml:2\n1:  %meta{ property: 'og:url', content: url }/\n2:  %meta{ property: 'og:site_name', content: site_title }/\n3:  %meta{ property: 'og:title', content: [yield(:page_title).strip.presence, site_title].compact.join(' - ') }/\n----------------\napp/views/accounts/_og.html.haml:3\n2:  %meta{ property: 'og:site_name', content: site_title }/\n3:  %meta{ property: 'og:title', content: [yield(:page_title).strip.presence, site_title].compact.join(' - ') }/\n4:  %meta{ property: 'og:description', content: account.note }/\n----------------\napp/views/accounts/_og.html.haml:4\n3:  %meta{ property: 'og:title', content: [yield(:page_title).strip.presence, site_title].compact.join(' - ') }/\n4:  %meta{ property: 'og:description', content: account.note }/\n5:  %meta{ property: 'og:image', content: full_asset_url(account.avatar.url(:original)) }/\n----------------\napp/views/accounts/_og.html.haml:5\n4:  %meta{ property: 'og:description', content: account.note }/\n5:  %meta{ property: 'og:image', content: full_asset_url(account.avatar.url(:original)) }/\n6:  %meta{ property: 'og:image:width', content: '120' }/\n----------------\napp/views/accounts/_og.html.haml:6\n5:  %meta{ property: 'og:image', content: full_asset_url(account.avatar.url(:original)) }/\n6:  %meta{ property: 'og:image:width', content: '120' }/\n7:  %meta{ property: 'og:image:height', content: '120' }/\n----------------\napp/views/accounts/_og.html.haml:7\n6:  %meta{ property: 'og:image:width', content: '120' }/\n7:  %meta{ property: 'og:image:height', content: '120' }/\n8:  %meta{ property: 'twitter:card', content: 'summary' }/\n----------------\napp/views/accounts/_og.html.haml:8\n7:  %meta{ property: 'og:image:height', content: '120' }/\n8:  %meta{ property: 'twitter:card', content: 'summary' }/\n----------------\n\n\napp/views/accounts/show.html.haml:8\n7:  \n8:    %meta{ property: 'og:type', content: 'profile' }/\n9:    = render 'og', account: @account, url: account_url(@account, only_path: false)\n----------------\napp/views/accounts/show.html.haml:15\n14:  .h-feed\n15:    %data.p-name{ value: \"#{@account.username} on #{site_hostname}\" }/\n16:  \n----------------\napp/views/accounts/show.html.haml:28\n27:      - if @statuses.size == 20\n28:        = link_to safe_join([t('pagination.next'), fa_icon('chevron-right')], ' '), short_account_url(@account, max_id: @statuses.last.id), class: 'next', rel: 'next'\n----------------\n\n(長いので省略)\n\nlib/templates/haml/scaffold/_form.html.haml:6: Illegal nesting: nesting within plain text is illegal. (Haml::SyntaxError)\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml-5.0.1/lib/haml/parser.rb:301:in `plain'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml-5.0.1/lib/haml/parser.rb:285:in `process_line'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml-5.0.1/lib/haml/parser.rb:133:in `block in call'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml-5.0.1/lib/haml/parser.rb:119:in `loop'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml-5.0.1/lib/haml/parser.rb:119:in `call'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/linter5.rb:8:in `parse'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/linter.rb:63:in `lint'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/runner.rb:33:in `lint'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/runner.rb:18:in `block in run'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/runner.rb:17:in `map'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/runner.rb:17:in `run'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/exe/haml_i18n_lint:28:in `\u0026lt;top (required)\u0026gt;'\n        from /home/sei/.rbenv/versions/2.4.1/bin/haml_i18n_lint:22:in `load'\n        from /home/sei/.rbenv/versions/2.4.1/bin/haml_i18n_lint:22:in `\u0026lt;main\u0026gt;'\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eapp/views/accounts/show.html.haml:15\u003c/code\u003eの\u003ccode\u003e%data.p-name{ value: \"#{@account.username} on #{site_hostname}\" }/\u003c/code\u003eのような、直接文字列が書かれている部分が検知されました。\u003c/p\u003e\n\n\u003cp\u003e一方、\u003ccode\u003efa_icon\u003c/code\u003eに渡している文字列や、\u003ccode\u003elink_to\u003c/code\u003eやmetaタグの属性に渡している文字列が誤って検知されているようです。\u003cbr\u003e\nそして残念ながらv0.9.0時点ではパースに失敗すると全体的に落ちてしまうようです。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"オプション\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eオプション\u003c/h3\u003e\n\n\u003cp\u003eオプションで設定ファイルを指定したり、対象ファイルを絞り込めます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% haml_i18n_lint --help\nUsage: haml_i18n_lint [OPTION]... [FILE]...\n    -c, --config=FILE                configuration file\n    -f, --files=PATTERN              pattern to find Haml template files, default: -f '**/*.haml'\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"誤検知を無視する設定を追加する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%AA%A4%E6%A4%9C%E7%9F%A5%E3%82%92%E7%84%A1%E8%A6%96%E3%81%99%E3%82%8B%E8%A8%AD%E5%AE%9A%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e誤検知を無視する設定を追加する\u003c/h3\u003e\n\n\u003cp\u003ehaml_i18n_lintでは\u003ccode\u003e-c\u003c/code\u003eで設定ファイルを指定できます。\u003cbr\u003e\n以下のような設定を\u003ccode\u003ehaml_i18n_lint.rb\u003c/code\u003eとして保存しました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"ruby\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehaml_i18n_lint.rb\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e# fa_iconは引数でFontAwesomeの名前の文字列を取り、i18nの必要がないので無視する\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eignore_methods\u003c/span\u003e\n  \u003cspan class=\"k\"\u003esuper\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"sx\"\u003e%w(fa_icon)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# link_toのtargetオプションやmetaタグのproperty/content属性はi18nの必要がないものとして無視する\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eignore_keys\u003c/span\u003e\n  \u003cspan class=\"k\"\u003esuper\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"sx\"\u003e%w(target property content)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# パースに失敗するファイルを弾く\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efiles\u003c/span\u003e\n  \u003cspan class=\"k\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereject\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s1\"\u003e'lib/templates/haml/scaffold/_form.html.haml'\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"ignore_methods-引数をi18nする必要がないメソッド名の配列\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#ignore_methods-%E5%BC%95%E6%95%B0%E3%82%92i18n%E3%81%99%E3%82%8B%E5%BF%85%E8%A6%81%E3%81%8C%E3%81%AA%E3%81%84%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%90%8D%E3%81%AE%E9%85%8D%E5%88%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eignore_methods: 引数をi18nする必要がないメソッド名の配列\u003c/h4\u003e\n\n\u003cp\u003eRailsでは引数で文字列を受け取るヘルパーメソッドをよく使います。ヘルパーメソッドによっては引数に渡す文字列についてi18nが必要ない場合があります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"haml\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e/ 例: render\n\u003c/span\u003e\u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erender\u003c/span\u003e \u003cspan class=\"s1\"\u003e'foos/bar'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ebar: \u003c/span\u003e\u003cspan class=\"vi\"\u003e@bar\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e引数をi18nする必要がないメソッド名の配列を\u003ccode\u003eignore_methods\u003c/code\u003eで指定すると、それらのメソッドはhaml_i18n_lintで検知されなくなります。\u003c/p\u003e\n\n\u003cp\u003eデフォルトの設定だと\u003ccode\u003eignore_methods\u003c/code\u003eには\u003ccode\u003et\u003c/code\u003eや\u003ccode\u003erender\u003c/code\u003eやRailsの一部のヘルパーなどが含まれています。\u003cbr\u003e\n独自のヘルパーなどを追加したい場合、\u003ccode\u003esuper\u003c/code\u003eに追加したいメソッド名を足します。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"ignore_keys-値をi18nする必要がない属性のキー\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#ignore_keys-%E5%80%A4%E3%82%92i18n%E3%81%99%E3%82%8B%E5%BF%85%E8%A6%81%E3%81%8C%E3%81%AA%E3%81%84%E5%B1%9E%E6%80%A7%E3%81%AE%E3%82%AD%E3%83%BC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eignore_keys: 値をi18nする必要がない属性のキー\u003c/h4\u003e\n\n\u003cp\u003eHamlでは以下のようにハッシュでid属性やclass属性を指定できますが、これらの属性はi18nする必要がありません。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"haml\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nt\"\u003e%p\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"ss\"\u003eid: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'foo'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'bar'\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ei18nが必要ない属性の名前を\u003ccode\u003eignore_keys\u003c/code\u003eで指定すると、それらの属性はhaml_i18n_lintで検知されなくなります。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"files-lint対象のファイル\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#files-lint%E5%AF%BE%E8%B1%A1%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003efiles: lint対象のファイル\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003efiles\u003c/code\u003eではlint対象のファイルパスの配列を返します。\u003cbr\u003e\nデフォルトでは\u003ccode\u003e**/*.haml\u003c/code\u003eにマッチするファイルの配列が返ってきます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e-f\u003c/code\u003eオプションや引数でファイルを指定することもできますが、例えば特定のディレクトリのファイルのみ無視したい場合のように、対象ファイルの絞り込みが複雑な場合はRubyで書いたほうが楽です。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"設定ファイルを指定して実行\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E5%AE%9F%E8%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e設定ファイルを指定して実行\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e-c\u003c/code\u003eオプションで今書いた設定ファイルを指定して実行してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% haml_i18n_lint -c haml_i18n_lint.rb\n\napp/views/accounts/show.html.haml:15\n14:  .h-feed\n15:    %data.p-name{ value: \"#{@account.username} on #{site_hostname}\" }/\n16:  \n----------------\n\n(長いので省略)\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eパースに失敗するファイルを対象から外したので無事最後まで実行できました \u003cimg alt=\":smiley:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f603.png\" title=\":smiley:\" width=\"20\"\u003e \u003cbr\u003e\n\u003ccode\u003efa_icon\u003c/code\u003eが誤検知されなくなりました \u003cimg alt=\":tada:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f389.png\" title=\":tada:\" width=\"20\"\u003e\u003cbr\u003e\nmetaタグの属性やlink_toのオプションが検知されなくなりました \u003cimg alt=\":thumbsup:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f44d.png\" title=\":thumbsup:\" width=\"20\"\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"件数を確認する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BB%B6%E6%95%B0%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e件数を確認する\u003c/h3\u003e\n\n\u003cp\u003e設定ファイルに以下を追加します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"ruby\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehaml_i18n_lint.rb\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eresult_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"n\"\u003edefine_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:report\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eresult_set\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresult_count\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eresult_set\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecount\u003c/span\u003e\n  \u003cspan class=\"k\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult_set\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# 終了時に総検知数を出す\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eat_exit\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Total: \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003eresult_count\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e実行してみると172箇所検知されました。(誤検知もあると思います)\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% haml_i18n_lint -c haml_i18n_lint.rb | tail\n38:        = link_to t('admin.reports.mark_as_resolved'), admin_report_path(@report, outcome: 'resolve'), method: :put, class: 'button'\n39:  - elsif !@report.action_taken_by_account.nil?\n----------------\napp/views/admin/reports/show.html.haml:43\n42:    %p\n43:      %strong Action taken by:\n44:      = @report.action_taken_by_account.acct\n----------------\n\n172\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"i18nが必要かどうか判断する処理をカスタマイズする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#i18n%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E5%88%A4%E6%96%AD%E3%81%99%E3%82%8B%E5%87%A6%E7%90%86%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ei18nが必要かどうか判断する処理をカスタマイズする\u003c/h3\u003e\n\n\u003cp\u003e設定ファイルに以下を追加します。\u003ccode\u003eneed_i18n?(str)\u003c/code\u003eメソッドを定義すると、文字列のi18nが必要かどうか判断する処理をカスタマイズできます。デフォルトだと文字列が\u003ccode\u003e/\\p{Alpha}/\u003c/code\u003eにマッチするかどうかで判断しています。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e# スペースが全く無い文字列は機械向けかも?\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eneed_i18n?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003esuper\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' '\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e実行してみると結構減りました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e----------------\n\n\napp/views/admin/reports/show.html.haml:43\n42:    %p\n43:      %strong Action taken by:\n44:      = @report.action_taken_by_account.acct\n----------------\n\n85\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"その他の設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eその他の設定\u003c/h3\u003e\n\n\u003cp\u003eexamplesディレクトリ以下に上記のような設定例のほか、i18n用のYAMLを出力する例などがまとまっています。\u003cbr\u003e\n\u003ca href=\"https://github.com/okinawarb/haml_i18n_lint/tree/master/examples\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/okinawarb/haml_i18n_lint/tree/master/examples\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h2\u003e\n\n\u003cp\u003ehaml_i18n_lintを使うとガッとi18nしたあとも継続的にi18nできそう。\u003c/p\u003e\n","body":"Ruby on Railsを使ったウェブアプリケーションを開発していてテンプレートをHamlで書いています。\n今までi18nせずに日本語で書いていたテンプレートをi18nしたくなりました。\n[Rails Internationalization (I18n) API](http://guides.rubyonrails.org/i18n.html)を参考に、viewの中の日本語の文字列を[#t](http://api.rubyonrails.org/classes/ActionView/Helpers/TranslationHelper.html#method-i-t)ヘルパーを使って置き換えます。\n\n継続的にi18nしたい\n----\n\ni18nは一度全部置き換えただけでは終わりません。置き換えた後もテンプレートは書き換えられていきます。\nテンプレートに変更があってもi18nされた状態を維持したいです。\nコードレビューでi18nされているか確認することは出来ますが人間なので見落とします。\nなのでlintをかけます。\n\nlintをかけるためにhaml_i18n_lint gemを作りました。\n\nhaml_i18n_lintを使う\n----\n\n[haml_i18n_lint](https://github.com/okinawarb/haml_i18n_lint)を使うとhamlテンプレート中にi18nが必要な文字列が残されているか確認できます。使い方を説明します。\n\n### インストール\n\n```\n% gem i haml_i18n_lint\n```\n\n### 実行\n\n何もオプションを指定せずに実行してみます。今回はmastodonに対して実行してみます。\n\n```\n% ghq get tootsuite/mastodon\n% cd ~/src/github.com/tootsuite/mastodon\n% haml_i18n_lint\n\n\napp/views/kaminari/_prev_page.html.haml:9\n8:  %span.prev\n9:    = link_to_unless current_page.first?, safe_join([fa_icon('chevron-left'), t('pagination.prev')], ' '), url, rel: 'prev', remote: remote\n----------------\n\n\napp/views/kaminari/_next_page.html.haml:9\n8:  %span.next\n9:    = link_to_unless current_page.last?, safe_join([t('pagination.next'), fa_icon('chevron-right')], ' '), url, rel: 'next', remote: remote\n----------------\n\n\napp/views/authorize_follows/_card.html.haml:7\n6:      %span.display-name\n7:        = link_to TagManager.instance.url_for(account), class: 'detailed-status__display-name p-author h-card', target: '_blank', rel: 'noopener' do\n8:          %strong.emojify= display_name(account)\n----------------\n\n\napp/views/accounts/_header.html.haml:17\n16:        %span= \"@#{account.username}\"\n17:        = fa_icon('lock') if account.locked?\n18:    .details\n----------------\n\n\napp/views/accounts/_og.html.haml:1\n1:  %meta{ property: 'og:url', content: url }/\n2:  %meta{ property: 'og:site_name', content: site_title }/\n----------------\napp/views/accounts/_og.html.haml:2\n1:  %meta{ property: 'og:url', content: url }/\n2:  %meta{ property: 'og:site_name', content: site_title }/\n3:  %meta{ property: 'og:title', content: [yield(:page_title).strip.presence, site_title].compact.join(' - ') }/\n----------------\napp/views/accounts/_og.html.haml:3\n2:  %meta{ property: 'og:site_name', content: site_title }/\n3:  %meta{ property: 'og:title', content: [yield(:page_title).strip.presence, site_title].compact.join(' - ') }/\n4:  %meta{ property: 'og:description', content: account.note }/\n----------------\napp/views/accounts/_og.html.haml:4\n3:  %meta{ property: 'og:title', content: [yield(:page_title).strip.presence, site_title].compact.join(' - ') }/\n4:  %meta{ property: 'og:description', content: account.note }/\n5:  %meta{ property: 'og:image', content: full_asset_url(account.avatar.url(:original)) }/\n----------------\napp/views/accounts/_og.html.haml:5\n4:  %meta{ property: 'og:description', content: account.note }/\n5:  %meta{ property: 'og:image', content: full_asset_url(account.avatar.url(:original)) }/\n6:  %meta{ property: 'og:image:width', content: '120' }/\n----------------\napp/views/accounts/_og.html.haml:6\n5:  %meta{ property: 'og:image', content: full_asset_url(account.avatar.url(:original)) }/\n6:  %meta{ property: 'og:image:width', content: '120' }/\n7:  %meta{ property: 'og:image:height', content: '120' }/\n----------------\napp/views/accounts/_og.html.haml:7\n6:  %meta{ property: 'og:image:width', content: '120' }/\n7:  %meta{ property: 'og:image:height', content: '120' }/\n8:  %meta{ property: 'twitter:card', content: 'summary' }/\n----------------\napp/views/accounts/_og.html.haml:8\n7:  %meta{ property: 'og:image:height', content: '120' }/\n8:  %meta{ property: 'twitter:card', content: 'summary' }/\n----------------\n\n\napp/views/accounts/show.html.haml:8\n7:  \n8:    %meta{ property: 'og:type', content: 'profile' }/\n9:    = render 'og', account: @account, url: account_url(@account, only_path: false)\n----------------\napp/views/accounts/show.html.haml:15\n14:  .h-feed\n15:    %data.p-name{ value: \"#{@account.username} on #{site_hostname}\" }/\n16:  \n----------------\napp/views/accounts/show.html.haml:28\n27:      - if @statuses.size == 20\n28:        = link_to safe_join([t('pagination.next'), fa_icon('chevron-right')], ' '), short_account_url(@account, max_id: @statuses.last.id), class: 'next', rel: 'next'\n----------------\n\n(長いので省略)\n\nlib/templates/haml/scaffold/_form.html.haml:6: Illegal nesting: nesting within plain text is illegal. (Haml::SyntaxError)\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml-5.0.1/lib/haml/parser.rb:301:in `plain'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml-5.0.1/lib/haml/parser.rb:285:in `process_line'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml-5.0.1/lib/haml/parser.rb:133:in `block in call'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml-5.0.1/lib/haml/parser.rb:119:in `loop'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml-5.0.1/lib/haml/parser.rb:119:in `call'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/linter5.rb:8:in `parse'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/linter.rb:63:in `lint'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/runner.rb:33:in `lint'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/runner.rb:18:in `block in run'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/runner.rb:17:in `map'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/lib/haml_i18n_lint/runner.rb:17:in `run'\n        from /home/sei/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/haml_i18n_lint-0.10.0/exe/haml_i18n_lint:28:in `\u003ctop (required)\u003e'\n        from /home/sei/.rbenv/versions/2.4.1/bin/haml_i18n_lint:22:in `load'\n        from /home/sei/.rbenv/versions/2.4.1/bin/haml_i18n_lint:22:in `\u003cmain\u003e'\n```\n\n`app/views/accounts/show.html.haml:15`の`%data.p-name{ value: \"#{@account.username} on #{site_hostname}\" }/`のような、直接文字列が書かれている部分が検知されました。\n\n一方、`fa_icon`に渡している文字列や、`link_to`やmetaタグの属性に渡している文字列が誤って検知されているようです。\nそして残念ながらv0.9.0時点ではパースに失敗すると全体的に落ちてしまうようです。\n\n### オプション\n\nオプションで設定ファイルを指定したり、対象ファイルを絞り込めます。\n\n```\n% haml_i18n_lint --help\nUsage: haml_i18n_lint [OPTION]... [FILE]...\n    -c, --config=FILE                configuration file\n    -f, --files=PATTERN              pattern to find Haml template files, default: -f '**/*.haml'\n```\n\n### 誤検知を無視する設定を追加する\n\nhaml_i18n_lintでは`-c`で設定ファイルを指定できます。\n以下のような設定を`haml_i18n_lint.rb`として保存しました。\n\n```haml_i18n_lint.rb\n# fa_iconは引数でFontAwesomeの名前の文字列を取り、i18nの必要がないので無視する\ndef ignore_methods\n  super + %w(fa_icon)\nend\n\n# link_toのtargetオプションやmetaタグのproperty/content属性はi18nの必要がないものとして無視する\ndef ignore_keys\n  super + %w(target property content)\nend\n\n# パースに失敗するファイルを弾く\ndef files\n  super.reject { |path| path == 'lib/templates/haml/scaffold/_form.html.haml' }\nend\n```\n\n#### ignore_methods: 引数をi18nする必要がないメソッド名の配列\n\nRailsでは引数で文字列を受け取るヘルパーメソッドをよく使います。ヘルパーメソッドによっては引数に渡す文字列についてi18nが必要ない場合があります。\n\n```haml\n/ 例: render\n= render 'foos/bar', bar: @bar\n```\n引数をi18nする必要がないメソッド名の配列を`ignore_methods`で指定すると、それらのメソッドはhaml_i18n_lintで検知されなくなります。\n\nデフォルトの設定だと`ignore_methods`には`t`や`render`やRailsの一部のヘルパーなどが含まれています。\n独自のヘルパーなどを追加したい場合、`super`に追加したいメソッド名を足します。\n\n#### ignore_keys: 値をi18nする必要がない属性のキー\n\nHamlでは以下のようにハッシュでid属性やclass属性を指定できますが、これらの属性はi18nする必要がありません。\n\n```haml\n%p{id: 'foo', class: 'bar'}\n```\n\ni18nが必要ない属性の名前を`ignore_keys`で指定すると、それらの属性はhaml_i18n_lintで検知されなくなります。\n\n#### files: lint対象のファイル\n\n`files`ではlint対象のファイルパスの配列を返します。\nデフォルトでは`**/*.haml`にマッチするファイルの配列が返ってきます。\n\n\n`-f`オプションや引数でファイルを指定することもできますが、例えば特定のディレクトリのファイルのみ無視したい場合のように、対象ファイルの絞り込みが複雑な場合はRubyで書いたほうが楽です。\n\n\n### 設定ファイルを指定して実行\n\n`-c`オプションで今書いた設定ファイルを指定して実行してみます。\n\n```\n% haml_i18n_lint -c haml_i18n_lint.rb\n\napp/views/accounts/show.html.haml:15\n14:  .h-feed\n15:    %data.p-name{ value: \"#{@account.username} on #{site_hostname}\" }/\n16:  \n----------------\n\n(長いので省略)\n```\n\nパースに失敗するファイルを対象から外したので無事最後まで実行できました :smiley: \n`fa_icon`が誤検知されなくなりました :tada:\nmetaタグの属性やlink_toのオプションが検知されなくなりました :+1:\n\n\n### 件数を確認する\n\n設定ファイルに以下を追加します。\n\n```haml_i18n_lint.rb\nresult_count = 0\ndefine_method(:report) do |result_set|\n  result_count += result_set.count\n  super(result_set)\nend\n\n# 終了時に総検知数を出す\nat_exit do\n  puts \"Total: #{result_count}\"\nend\n```\n\n実行してみると172箇所検知されました。(誤検知もあると思います)\n\n```\n% haml_i18n_lint -c haml_i18n_lint.rb | tail\n38:        = link_to t('admin.reports.mark_as_resolved'), admin_report_path(@report, outcome: 'resolve'), method: :put, class: 'button'\n39:  - elsif !@report.action_taken_by_account.nil?\n----------------\napp/views/admin/reports/show.html.haml:43\n42:    %p\n43:      %strong Action taken by:\n44:      = @report.action_taken_by_account.acct\n----------------\n\n172\n```\n\n### i18nが必要かどうか判断する処理をカスタマイズする\n\n設定ファイルに以下を追加します。`need_i18n?(str)`メソッドを定義すると、文字列のi18nが必要かどうか判断する処理をカスタマイズできます。デフォルトだと文字列が`/\\p{Alpha}/`にマッチするかどうかで判断しています。\n\n```rb\n# スペースが全く無い文字列は機械向けかも?\ndef need_i18n?(str)\n  super \u0026\u0026 str.include?(' ')\nend\n```\n\n実行してみると結構減りました。\n\n```\n----------------\n\n\napp/views/admin/reports/show.html.haml:43\n42:    %p\n43:      %strong Action taken by:\n44:      = @report.action_taken_by_account.acct\n----------------\n\n85\n```\n\n### その他の設定\n\nexamplesディレクトリ以下に上記のような設定例のほか、i18n用のYAMLを出力する例などがまとまっています。\nhttps://github.com/okinawarb/haml_i18n_lint/tree/master/examples\n\n\nまとめ\n----\n\nhaml_i18n_lintを使うとガッとi18nしたあとも継続的にi18nできそう。\n","coediting":false,"comments_count":0,"created_at":"2017-05-07T06:28:02+09:00","group":null,"id":"fc17b13bc0c68432bfd4","likes_count":8,"private":false,"reactions_count":0,"tags":[{"name":"haml","versions":[]}],"title":"haml_i18n_lintでHamlテンプレートがi18nされているか調べる","updated_at":"2017-05-14T05:22:06+09:00","url":"https://qiita.com/hanachin_/items/fc17b13bc0c68432bfd4","user":{"description":"既婚バイ","facebook_id":"seiei.higa","followees_count":166,"followers_count":120,"github_login_name":"hanachin","id":"hanachin_","items_count":55,"linkedin_id":"","location":"Naha, Okinawa, Japan","name":"Seiei Miyagi","organization":"YassLab","permanent_id":2074,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/2074/profile-images/1511092027","twitter_screen_name":"hanachin_","website_url":""},"page_views_count":null}]