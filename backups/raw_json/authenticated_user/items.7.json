[{"rendered_body":"\n\u003ch2\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h2\u003e\n\n\u003cp\u003e前処理でRubyのコードをパースしてSATySFiのインラインコマンドに変換し、SATySFiのインラインコマンドを定義して色付けをする感じで実装した。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"結果\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E6%9E%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結果\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/hanachin/satysfi-syntax-highlight-sample/releases/download/v0.0.1/sample.pdf\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/6d27e68b5c6086ee3e78d9fe59755729fe4bacc8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f38323063633565392d366330372d656661382d376339362d6132373633333932356138632e706e67\" alt=\"Screenshot from 2018-10-09 12-44-24.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/2074/820cc5e9-6c07-efa8-7c96-a27633925a8c.png\"\u003e\u003cbr\u003e\n\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/hanachin/satysfi-syntax-highlight-sample/releases/tag/v0.0.1\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/hanachin/satysfi-syntax-highlight-sample/releases/tag/v0.0.1\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eソースコードはここにあります。\u003cbr\u003e\n\u003ca href=\"https://github.com/hanachin/satysfi-syntax-highlight-sample\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/hanachin/satysfi-syntax-highlight-sample\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"実装方針\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A3%85%E6%96%B9%E9%87%9D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実装方針\u003c/h2\u003e\n\n\u003cp\u003e以下のような方法が考えられます。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSATySFi(言語の方)で字句解析する\u003c/li\u003e\n\u003cli\u003eSATySFi(言語実装の方)で字句解析する\u003c/li\u003e\n\u003cli\u003eSATySFiでは字句解析をせず前処理として外部で字句解析を行い結果を.satyに変換する\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eここでは一番最後の方針で実装します。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"理由\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%90%86%E7%94%B1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e理由\u003c/h3\u003e\n\n\u003cp\u003eSATySFi(言語の方)で字句解析を実装するにはまだまだSATySFiでのプログラミング経験が足りません。\u003cbr\u003e\nSATySFi(言語実装の方)に手を加えるにもOCamlを書いた経験がなく学習に時間がかかりそうです。\u003cbr\u003e\n一番最後の前処理を挟む方針だと書き慣れたRubyで実装することが出来ます。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"前処理でやること\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%89%8D%E5%87%A6%E7%90%86%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e前処理でやること\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eRubyのプログラムのソースコードを受けとり字句解析する\u003c/li\u003e\n\u003cli\u003e字句解析した結果をSATySFiのインラインコマンドに変換しsatyに埋め込む\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e字句解析には\u003ca href=\"https://github.com/pocke/iro\" rel=\"nofollow noopener\" target=\"_blank\"\u003eiro\u003c/a\u003eを使います。\u003cbr\u003e\n埋め込みには\u003ca href=\"https://docs.ruby-lang.org/en/2.5.0/ERB.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eerb\u003c/a\u003eを使います。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"実装\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A3%85\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実装\u003c/h2\u003e\n\n\u003cp\u003eこんな感じでRubyのコードをパースしてSATySFiのコマンドに変換して書き出す\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"ruby\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ehighlight.rb\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"iro\"\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eusing\u003c/span\u003e \u003cspan class=\"no\"\u003eModule\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erefine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etype\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003elineno\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ecolumn\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003elength\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"no\"\u003eINLINE_CMD_MAP\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"String\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-string\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"Charactor\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-character\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"Number\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-number\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"Float\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-float\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"Comment\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-comment\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"Type\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-type\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"Delimiter\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-delimiter\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"rubyDefine\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-define\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"keyword\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-keyword\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"rubyFunction\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-function\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\"rubyLocalVariable\"\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code-lvar\"\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ehighlight_positions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etokens\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eIro\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eRuby\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eParser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etokens\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etokens\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eflat_map\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eposs\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eposs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"no\"\u003eINLINE_CMD_MAP\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efetch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}.\u003c/span\u003e\u003cspan class=\"nf\"\u003esort_by\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elineno\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecolumn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ehighlight_code\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach_char\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003echunk\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\" \"\u003c/span\u003e \u003cspan class=\"p\"\u003e}.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003espace\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecs\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003espace\u003c/span\u003e\n      \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s2\"\u003ecode-space;\"\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ecs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003ecs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eempty?\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\"\"\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e(`\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ejoin\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`);\"\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ejoin\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ehighlight\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehighlight_positions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003esaty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e''\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach_line\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ewith_index\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elineno\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eline_hs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elineno\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003elineno\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003esaty\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehighlight_code\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"code-other\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eand\u003c/span\u003e \u003cspan class=\"k\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eline_hs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eempty?\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elast_column\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eline_hs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"n\"\u003esaty\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehighlight_code\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"code-other\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elast_column\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecolumn\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n      \u003cspan class=\"n\"\u003elast_column\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecolumn\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elength\u003c/span\u003e\n      \u003cspan class=\"n\"\u003esaty\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehighlight_code\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecolumn\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"n\"\u003elast_column\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esaty\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehighlight_code\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"code-other\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elast_column\u003c/span\u003e\u003cspan class=\"o\"\u003e..-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esaty\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s2\"\u003ecode-new-line;\"\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"n\"\u003esaty\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこういう感じでerbから\u003ccode\u003ehighlight\u003c/code\u003eメソッドを呼び出します。\u003cbr\u003e\nRubyのソースコードをヒアドキュメントで書いて\u003ccode\u003ehighlight\u003c/code\u003eメソッドに渡しています。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"ml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003esample.saty.erb\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"n\"\u003e+code-highlight\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003e\u0026lt;%=\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ehighlight\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e\u0026lt;\u0026lt;~\u003c/span\u003e\u003cspan class=\"nd\"\u003e'RUBY'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003e# Greet\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eyou!\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edef\u003c/span\u003e \u003cspan class=\"n\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Hello, #{name}\"\u003c/span\u003e\n        \u003cspan class=\"kr\"\u003eend\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nd\"\u003e'your\u003c/span\u003e \u003cspan class=\"n\"\u003ename'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eRUBY\u003c/span\u003e\n      \u003cspan class=\"n\"\u003e%\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこういう感じに変換されます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003esample.saty\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    +code-highlight {\n      \\code-comment(`#`);\\code-space;\\code-comment(`Greet`);\\code-space;\\code-comment(`to`);\\code-space;\\code-comment(`you!`);\\code-other(`\n`);\\code-new-line;\\code-define(`def`);\\code-space;\\code-function(`hello`);\\code-other(`(name)\n`);\\code-new-line;\\code-space;\\code-space;\\code-other(`puts`);\\code-space;\\code-delimiter(`\"`);\\code-string(`Hello,`);\\code-space;\\code-delimiter(`#{`);\\code-lvar(`name`);\\code-delimiter(`}`);\\code-delimiter(`\"`);\\code-other(`\n`);\\code-new-line;\\code-define(`end`);\\code-other(`\n`);\\code-new-line;\\code-other(`\n`);\\code-other(`hello(`);\\code-delimiter(`'`);\\code-string(`your`);\\code-space;\\code-string(`name`);\\code-delimiter(`'`);\\code-other(`)\n`);\\code-new-line;\n    }\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eあとは対応するインラインコマンドをSATySFiで実装して、色とかつければ完成。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003elocal.satyh\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e@require: color\n@require: gr\n\nmodule Highlight : sig\n  direct \\code-string    : [string] inline-cmd\n  direct \\code-character : [string] inline-cmd\n  direct \\code-number    : [string] inline-cmd\n  direct \\code-float     : [string] inline-cmd\n  direct \\code-comment   : [string] inline-cmd\n  direct \\code-type      : [string] inline-cmd\n  direct \\code-delimiter : [string] inline-cmd\n  direct \\code-define    : [string] inline-cmd\n  direct \\code-keyword   : [string] inline-cmd\n  direct \\code-function  : [string] inline-cmd\n  direct \\code-lvar      : [string] inline-cmd\n  direct \\code-other     : [string] inline-cmd\n\n  direct \\code-space : [] inline-cmd\n  direct \\code-new-line : [] inline-cmd\n  direct +code-highlight : [inline-text] block-cmd\nend = struct\n  let highlight ctx color code =\n    read-inline (ctx |\u0026gt; set-text-color color) (embed-string code)\n\n  let-inline ctx \\code-string    code = highlight ctx (RGB (1.0,  0.43, 0.43)) code\n  let-inline ctx \\code-character code = highlight ctx (RGB (1.0,  0.43, 0.43)) code\n  let-inline ctx \\code-number    code = highlight ctx (RGB (1.0,  0.43, 0.43)) code\n  let-inline ctx \\code-float     code = highlight ctx (RGB (1.0,  0.43, 0.43)) code\n  let-inline ctx \\code-comment   code = highlight ctx (RGB (0.6,  0.60, 0.60)) code\n  let-inline ctx \\code-type      code = highlight ctx (RGB (1.0,  0.86, 0.42)) code\n  let-inline ctx \\code-delimiter code = highlight ctx (RGB (0.78, 0.29, 1.00)) code\n  let-inline ctx \\code-define    code = highlight ctx (RGB (0.28, 1.00, 0.65)) code\n  let-inline ctx \\code-keyword   code = highlight ctx (RGB (0.24, 0.75, 1.00)) code\n  let-inline ctx \\code-function  code = highlight ctx (RGB (0.24, 0.75, 1.00)) code\n  let-inline ctx \\code-lvar      code = highlight ctx (RGB (0.24, 0.75, 1.00)) code\n  let-inline ctx \\code-other     code = highlight ctx (RGB (0.87, 0.87, 0.87)) code\n\n  let-inline ctx \\code-space =\n    inline-skip (get-natural-width (read-inline ctx {0}))\n\n  let-inline ctx \\code-new-line =\n    inline-fil ++ discretionary 0 (inline-skip((get-text-width ctx) *' 2.)) inline-nil inline-nil\n\n  let code-decoset =\n    let deco (x, y) w h d =\n      [ fill (RGB (0.2, 0.2, 0.2)) (Gr.rectangle (x, y -' d) (x +' w, y +' h)) ]\n    in\n      (deco, deco, deco, deco)\n  let code-fill-color = (RGB(0.975, 0.975, 1.))\n  let code-stroke-color = (RGB(0., 0., 0.25))\n  let code-pads = (5pt, 5pt, 5pt, 5pt)\n  let code-ctx ctx =\n    let mono-ctx = ctx |\u0026gt; set-font Latin (`lmmono`, 1., 0.) in\n    let fontsize = get-font-size mono-ctx in\n    let charwid = get-natural-width (read-inline mono-ctx {0}) in\n    mono-ctx |\u0026gt; set-space-ratio (charwid /' fontsize) 0. 0.\n  let-block ctx +code-highlight inner =\n    block-frame-breakable ctx code-pads code-decoset (fun ctx -\u0026gt; (\n      line-break true true (code-ctx ctx) (read-inline (code-ctx ctx) inner)\n    ))\nend\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"今後\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BB%8A%E5%BE%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e今後\u003c/h2\u003e\n\n\u003cp\u003eRubyで実装した部分を徐々にSATySFi実装に置き換えていけば前処理としてerbを実行する必要がなくなる、はず。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://tyd.kisaya.net/?t=c10d39a462b1931ddf8dc6566e51818c\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/8622bc02ae1ef9cfbd0978f80e6db5bd85088ddc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f35303964653433622d663362302d373761342d303366302d3166313738343464366635342e6a706567\" alt=\"c10d39a462b1931ddf8dc6566e51818c.jpg\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/2074/509de43b-f3b0-77a4-03f0-1f17844d6f54.jpeg\"\u003e\u003cbr\u003e\n\u003c/a\u003e\u003c/p\u003e\n","body":"## 結論\n\n前処理でRubyのコードをパースしてSATySFiのインラインコマンドに変換し、SATySFiのインラインコマンドを定義して色付けをする感じで実装した。\n\n## 結果\n\n[![Screenshot from 2018-10-09 12-44-24.png](https://qiita-image-store.s3.amazonaws.com/0/2074/820cc5e9-6c07-efa8-7c96-a27633925a8c.png)\n](https://github.com/hanachin/satysfi-syntax-highlight-sample/releases/download/v0.0.1/sample.pdf)\nhttps://github.com/hanachin/satysfi-syntax-highlight-sample/releases/tag/v0.0.1\n\nソースコードはここにあります。\nhttps://github.com/hanachin/satysfi-syntax-highlight-sample\n\n## 実装方針\n\n以下のような方法が考えられます。\n\n* SATySFi(言語の方)で字句解析する\n* SATySFi(言語実装の方)で字句解析する\n* SATySFiでは字句解析をせず前処理として外部で字句解析を行い結果を.satyに変換する\n\nここでは一番最後の方針で実装します。\n\n### 理由\n\nSATySFi(言語の方)で字句解析を実装するにはまだまだSATySFiでのプログラミング経験が足りません。\nSATySFi(言語実装の方)に手を加えるにもOCamlを書いた経験がなく学習に時間がかかりそうです。\n一番最後の前処理を挟む方針だと書き慣れたRubyで実装することが出来ます。\n\n### 前処理でやること\n\n* Rubyのプログラムのソースコードを受けとり字句解析する\n* 字句解析した結果をSATySFiのインラインコマンドに変換しsatyに埋め込む\n\n字句解析には[iro](https://github.com/pocke/iro)を使います。\n埋め込みには[erb](https://docs.ruby-lang.org/en/2.5.0/ERB.html)を使います。\n\n## 実装\n\nこんな感じでRubyのコードをパースしてSATySFiのコマンドに変換して書き出す\n\n```highlight.rb\nrequire \"iro\"\n\nusing Module.new {\n  refine(Array) do\n    def type\n      self[0]\n    end\n\n    def lineno\n      self[1] - 1\n    end\n\n    def column\n      self[2] - 1\n    end\n\n    def length\n      self[3]\n    end\n  end\n}\n\nINLINE_CMD_MAP =\n  {\n    \"String\" =\u003e \"code-string\",\n    \"Charactor\" =\u003e \"code-character\",\n    \"Number\" =\u003e \"code-number\",\n    \"Float\" =\u003e \"code-float\",\n    \"Comment\" =\u003e \"code-comment\",\n    \"Type\" =\u003e \"code-type\",\n    \"Delimiter\" =\u003e \"code-delimiter\",\n    \"rubyDefine\" =\u003e \"code-define\",\n    \"keyword\" =\u003e \"code-keyword\",\n    \"rubyFunction\" =\u003e \"code-function\",\n    \"rubyLocalVariable\" =\u003e \"code-lvar\"\n  }\n\ndef highlight_positions(code)\n  tokens = Iro::Ruby::Parser.tokens(code)\n  tokens.flat_map {|group, poss|\n    poss.map {|pos|\n      [INLINE_CMD_MAP.fetch(group), *pos]\n    }\n  }.sort_by {|pos|\n    [pos.lineno, pos.column]\n  }\nend\n\ndef highlight_code(cmd, code)\n  code.each_char.chunk {|c| c == \" \" }.map do |space, cs|\n    if space\n      \"\\\\code-space;\" * cs.size\n    elsif cs.empty?\n        \"\"\n    else\n        \"\\\\#{cmd}(`#{cs.join}`);\"\n    end\n  end.join\nend\n\ndef highlight(code)\n  hs = highlight_positions(code)\n\n  saty = ''\n  code.each_line.with_index do |line, lineno|\n    line_hs = hs.select {|h| h.lineno == lineno }\n\n    saty \u003c\u003c highlight_code(\"code-other\", line) and next if line_hs.empty?\n\n    last_column = 0\n    line_hs.each do |h|\n      saty \u003c\u003c highlight_code(\"code-other\", line[last_column...h.column])\n      last_column = h.column + h.length\n      saty \u003c\u003c highlight_code(h.type, line[h.column...last_column])\n    end\n    saty \u003c\u003c highlight_code(\"code-other\", line[last_column..-1])\n    saty \u003c\u003c \"\\\\code-new-line;\"\n  end\n  saty\nend\n```\n\nこういう感じでerbから`highlight`メソッドを呼び出します。\nRubyのソースコードをヒアドキュメントで書いて`highlight`メソッドに渡しています。\n\n```ml:sample.saty.erb\n    +code-highlight {\n      \u003c%=\n      highlight(\u003c\u003c~'RUBY')\n        # Greet to you!\n        def hello(name)\n          puts \"Hello, #{name}\"\n        end\n\n        hello('your name')\n      RUBY\n      %\u003e\n    }\n```\n\nこういう感じに変換されます。\n\n```sample.saty\n    +code-highlight {\n      \\code-comment(`#`);\\code-space;\\code-comment(`Greet`);\\code-space;\\code-comment(`to`);\\code-space;\\code-comment(`you!`);\\code-other(`\n`);\\code-new-line;\\code-define(`def`);\\code-space;\\code-function(`hello`);\\code-other(`(name)\n`);\\code-new-line;\\code-space;\\code-space;\\code-other(`puts`);\\code-space;\\code-delimiter(`\"`);\\code-string(`Hello,`);\\code-space;\\code-delimiter(`#{`);\\code-lvar(`name`);\\code-delimiter(`}`);\\code-delimiter(`\"`);\\code-other(`\n`);\\code-new-line;\\code-define(`end`);\\code-other(`\n`);\\code-new-line;\\code-other(`\n`);\\code-other(`hello(`);\\code-delimiter(`'`);\\code-string(`your`);\\code-space;\\code-string(`name`);\\code-delimiter(`'`);\\code-other(`)\n`);\\code-new-line;\n    }\n```\n\nあとは対応するインラインコマンドをSATySFiで実装して、色とかつければ完成。\n\n```local.satyh\n@require: color\n@require: gr\n\nmodule Highlight : sig\n  direct \\code-string    : [string] inline-cmd\n  direct \\code-character : [string] inline-cmd\n  direct \\code-number    : [string] inline-cmd\n  direct \\code-float     : [string] inline-cmd\n  direct \\code-comment   : [string] inline-cmd\n  direct \\code-type      : [string] inline-cmd\n  direct \\code-delimiter : [string] inline-cmd\n  direct \\code-define    : [string] inline-cmd\n  direct \\code-keyword   : [string] inline-cmd\n  direct \\code-function  : [string] inline-cmd\n  direct \\code-lvar      : [string] inline-cmd\n  direct \\code-other     : [string] inline-cmd\n\n  direct \\code-space : [] inline-cmd\n  direct \\code-new-line : [] inline-cmd\n  direct +code-highlight : [inline-text] block-cmd\nend = struct\n  let highlight ctx color code =\n    read-inline (ctx |\u003e set-text-color color) (embed-string code)\n\n  let-inline ctx \\code-string    code = highlight ctx (RGB (1.0,  0.43, 0.43)) code\n  let-inline ctx \\code-character code = highlight ctx (RGB (1.0,  0.43, 0.43)) code\n  let-inline ctx \\code-number    code = highlight ctx (RGB (1.0,  0.43, 0.43)) code\n  let-inline ctx \\code-float     code = highlight ctx (RGB (1.0,  0.43, 0.43)) code\n  let-inline ctx \\code-comment   code = highlight ctx (RGB (0.6,  0.60, 0.60)) code\n  let-inline ctx \\code-type      code = highlight ctx (RGB (1.0,  0.86, 0.42)) code\n  let-inline ctx \\code-delimiter code = highlight ctx (RGB (0.78, 0.29, 1.00)) code\n  let-inline ctx \\code-define    code = highlight ctx (RGB (0.28, 1.00, 0.65)) code\n  let-inline ctx \\code-keyword   code = highlight ctx (RGB (0.24, 0.75, 1.00)) code\n  let-inline ctx \\code-function  code = highlight ctx (RGB (0.24, 0.75, 1.00)) code\n  let-inline ctx \\code-lvar      code = highlight ctx (RGB (0.24, 0.75, 1.00)) code\n  let-inline ctx \\code-other     code = highlight ctx (RGB (0.87, 0.87, 0.87)) code\n\n  let-inline ctx \\code-space =\n    inline-skip (get-natural-width (read-inline ctx {0}))\n\n  let-inline ctx \\code-new-line =\n    inline-fil ++ discretionary 0 (inline-skip((get-text-width ctx) *' 2.)) inline-nil inline-nil\n\n  let code-decoset =\n    let deco (x, y) w h d =\n      [ fill (RGB (0.2, 0.2, 0.2)) (Gr.rectangle (x, y -' d) (x +' w, y +' h)) ]\n    in\n      (deco, deco, deco, deco)\n  let code-fill-color = (RGB(0.975, 0.975, 1.))\n  let code-stroke-color = (RGB(0., 0., 0.25))\n  let code-pads = (5pt, 5pt, 5pt, 5pt)\n  let code-ctx ctx =\n    let mono-ctx = ctx |\u003e set-font Latin (`lmmono`, 1., 0.) in\n    let fontsize = get-font-size mono-ctx in\n    let charwid = get-natural-width (read-inline mono-ctx {0}) in\n    mono-ctx |\u003e set-space-ratio (charwid /' fontsize) 0. 0.\n  let-block ctx +code-highlight inner =\n    block-frame-breakable ctx code-pads code-decoset (fun ctx -\u003e (\n      line-break true true (code-ctx ctx) (read-inline (code-ctx ctx) inner)\n    ))\nend\n```\n\n## 今後\n\nRubyで実装した部分を徐々にSATySFi実装に置き換えていけば前処理としてerbを実行する必要がなくなる、はず。\n\n[![c10d39a462b1931ddf8dc6566e51818c.jpg](https://qiita-image-store.s3.amazonaws.com/0/2074/509de43b-f3b0-77a4-03f0-1f17844d6f54.jpeg)\n](http://tyd.kisaya.net/?t=c10d39a462b1931ddf8dc6566e51818c)\n","coediting":false,"comments_count":0,"created_at":"2018-10-09T13:18:48+09:00","group":null,"id":"bebb875f36e7ac3e7368","likes_count":4,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]},{"name":"SATySFi","versions":[]}],"title":"SATySFi で Ruby のソースコードをシンタックス ハイライトする","updated_at":"2018-10-09T13:18:48+09:00","url":"https://qiita.com/hanachin_/items/bebb875f36e7ac3e7368","user":{"description":"既婚バイ","facebook_id":"seiei.higa","followees_count":166,"followers_count":120,"github_login_name":"hanachin","id":"hanachin_","items_count":55,"linkedin_id":"","location":"Naha, Okinawa, Japan","name":"Seiei Miyagi","organization":"YassLab","permanent_id":2074,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/2074/profile-images/1511092027","twitter_screen_name":"hanachin_","website_url":""},"page_views_count":null}]