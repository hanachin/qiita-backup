[{"rendered_body":"\n\u003ch2\u003e\n\u003cspan id=\"tldr\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#tldr\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eTL;DR\u003c/h2\u003e\n\n\u003cp\u003egroovyやKotlinの\u003ccode\u003eit\u003c/code\u003eのようにブロックに渡された値を\u003ccode\u003eit\u003c/code\u003eで参照できる\u003ccode\u003ethats_it\u003c/code\u003egemの紹介です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"thats_it\"\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; [2, 4, 6]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e便利ですね。\u003c/p\u003e\n\n\u003cp\u003e了\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"kotlinやgroovyのitとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#kotlin%E3%82%84groovy%E3%81%AEit%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eKotlinやgroovyのitとは\u003c/h2\u003e\n\n\u003cp\u003eラムダ式が1つしかパラメーターを取らない場合、そのパラメーターを宣言しなくても暗黙的に宣言された「it」変数でそのパラメーターを参照できる便利機能。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"参考\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://kotlinlang.org/docs/reference/lambdas.html#it-implicit-name-of-a-single-parameter\" rel=\"nofollow noopener\" target=\"_blank\"\u003eHigher-Order Functions and Lambdas - Kotlin Programming Language it: implicit name of a single parameter\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://groovy-lang.org/closures.html#implicit-it\" rel=\"nofollow noopener\" target=\"_blank\"\u003eThe Apache Groovy programming language - Closures 2.2. Implicit parameter\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"忙しい人向けの実装方法解説\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BF%99%E3%81%97%E3%81%84%E4%BA%BA%E5%90%91%E3%81%91%E3%81%AE%E5%AE%9F%E8%A3%85%E6%96%B9%E6%B3%95%E8%A7%A3%E8%AA%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e忙しい人向けの実装方法解説\u003c/h2\u003e\n\n\u003cp\u003eブロックが取る引数が0かつ\u003ccode\u003eit\u003c/code\u003eの呼び出しがある場合にブロックのISeqを書き換えてブロックが1つ引数を取ることにする。\u003csup id=\"fnref1\"\u003e\u003ca href=\"#fn1\" rel=\"footnote\" title=\"実際には書き換え後のコードと同様の動きをするわけではない。ローカル変数itには何も入っておらずitは変数参照ではなくメソッド呼び出しとなっている。RubyVMとISeqの動作はRubyのコードで表現できないので雰囲気だけ掴んでもらえれば。\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e# 書き換え前\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eyield_self\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 書き換え後\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eyield_self\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e了\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"どのタイミングでブロックを書き換えるか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A9%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A7%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%82%92%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eどのタイミングでブロックを書き換えるか\u003c/h2\u003e\n\n\u003cp\u003eTracePointを使いメソッド呼び出しのタイミングでメソッドに渡されたブロックのISeqを取得し書き換える。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e# Rubyで書かれたメソッドの呼び出し時に呼ばれる\u003c/span\u003e\n\u003cspan class=\"no\"\u003eTracePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etrace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ここで書き換える\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# Cで書かれたメソッドの呼び出し時に呼ばれる\u003c/span\u003e\n\u003cspan class=\"no\"\u003eTracePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etrace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:c_call\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ここで書き換える\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eブロックが呼び出されるタイミングで呼び出される\u003ccode\u003eb_call\u003c/code\u003eというイベントもあるがそこではISeqを書き換えられない。理由は後述。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ブロックが持っている情報\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%8C%E6%8C%81%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E6%83%85%E5%A0%B1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eブロックが持っている情報\u003c/h2\u003e\n\n\u003cp\u003eブロックのISeqにはブロックが取る引数の情報が保持されている。\u003cbr\u003e\n以下のような引数を取る場合のISeqを確認してみる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eyield_self\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003erubyではオプションで\u003ccode\u003e--dump=insns\u003c/code\u003eを渡すとISeqを確認できる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% ruby -v --dump=insns -e '42.yield_self {|it| it }'\nruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]\n== disasm: #\u0026lt;ISeq:\u0026lt;main\u0026gt;@-e:1 (1,0)-(1,24)\u0026gt;=============================\n== catch table\n| catch type: break  st: 0000 ed: 0006 sp: 0000 cont: 0006\n== disasm: #\u0026lt;ISeq:block in \u0026lt;main\u0026gt;@-e:1 (1,14)-(1,24)\u0026gt;===================\n== catch table\n| catch type: redo   st: 0001 ed: 0003 sp: 0000 cont: 0001\n| catch type: next   st: 0001 ed: 0003 sp: 0000 cont: 0003\n|------------------------------------------------------------------------\nlocal table (size: 1, argc: 1 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])\n[ 1] it\u0026lt;Arg\u0026gt;\n0000 nop                                                              (   1)[Bc]\n0001 getlocal_OP__WC__0 it[Li]\n0003 leave            [Br]\n|------------------------------------------------------------------------\n0000 putobject        42                                              (   1)[Li]\n0002 send             \u0026lt;callinfo!mid:yield_self, argc:0\u0026gt;, \u0026lt;callcache\u0026gt;, block in \u0026lt;main\u0026gt;\n0006 leave\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eブロックのISeqを確認してみると以下のように引数を1つ取ることが分かる。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003elocal table (size: 1, argc: 1 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e一方ブロックが引数を取らない場合はローカル変数が無いので以下のようにlocal tableが省略して表示される。\u003cbr\u003e\n表示されていないだけで、実際にはlocal tableの情報は引数を渡さない場合もブロックのISeqに保持されており、\u003ccode\u003esize: 0, argc: 0\u003c/code\u003eとなっている。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% ruby -v --dump=insns -e '42.yield_self { it }'\nruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]\n== disasm: #\u0026lt;ISeq:\u0026lt;main\u0026gt;@-e:1 (1,0)-(1,20)\u0026gt;=============================\n== catch table\n| catch type: break  st: 0000 ed: 0006 sp: 0000 cont: 0006\n== disasm: #\u0026lt;ISeq:block in \u0026lt;main\u0026gt;@-e:1 (1,14)-(1,20)\u0026gt;===================\n== catch table\n| catch type: redo   st: 0001 ed: 0005 sp: 0000 cont: 0001\n| catch type: next   st: 0001 ed: 0005 sp: 0000 cont: 0005\n|------------------------------------------------------------------------\n0000 nop                                                              (   1)[Bc]\n0001 putself          [Li]\n0002 opt_send_without_block \u0026lt;callinfo!mid:it, argc:0, FCALL|VCALL|ARGS_SIMPLE\u0026gt;, \u0026lt;callcache\u0026gt;\n0005 leave            [Br]\n|------------------------------------------------------------------------\n0000 putobject        42                                              (   1)[Li]\n0002 send             \u0026lt;callinfo!mid:yield_self, argc:0\u0026gt;, \u0026lt;callcache\u0026gt;, block in \u0026lt;main\u0026gt;\n0006 leave\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ブロック呼び出し周りのrubyvmの動作\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E5%91%A8%E3%82%8A%E3%81%AErubyvm%E3%81%AE%E5%8B%95%E4%BD%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eブロック呼び出し周りのRubyVMの動作\u003c/h2\u003e\n\n\u003cp\u003eブロックを呼び出すコードを読めばブロックのISeqを取る方法やどう書き換えればいいかがが分かる。\u003c/p\u003e\n\n\u003cp\u003e以下のようなブロックを呼び出す内容のプログラムのISeqを確認する。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eyield\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% ruby -v --dump=insns -e 'def foo; yield 42; end'\nruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]\n== disasm: #\u0026lt;ISeq:\u0026lt;main\u0026gt;@-e:1 (1,0)-(1,22)\u0026gt;=============================\n0000 putspecialobject 1                                               (   1)[Li]\n0002 putobject        :foo\n0004 putiseq          foo\n0006 opt_send_without_block \u0026lt;callinfo!mid:core#define_method, argc:2, ARGS_SIMPLE\u0026gt;, \u0026lt;callcache\u0026gt;\n0009 leave\n== disasm: #\u0026lt;ISeq:foo@-e:1 (1,0)-(1,22)\u0026gt;================================\n0000 putobject        42                                              (   1)[LiCa]\n0002 invokeblock      \u0026lt;callinfo!argc:1, ARGS_SIMPLE\u0026gt;\n0004 leave            [Re]\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003einvokeblock\u003c/code\u003e命令で呼び出しているよう。ruby/rubyをcloneしてgit grepする\u003csup id=\"fnref2\"\u003e\u003ca href=\"#fn2\" rel=\"footnote\" title=\"https://github.com/ruby/ruby/tree/v2_5_1\"\u003e2\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% git grep invokeblock\nbootstraptest/test_insns.rb:  [ 'invokeblock',            \u0026lt;\u0026lt;~'},', ], # {\ncompile.c:  ADD_INSN1(ret, line, invokeblock, new_callinfo(iseq, 0, FIX2INT(argc), flag, keywords, FALSE));\ndoc/ChangeLog-1.9.3:    * insns.def (invokeblock): fix of splat argument.\ndoc/ChangeLog-1.9.3:    * insns.def (invokeblock): check block is created by lambda\ndoc/ChangeLog-2.0.0:    * insns.def (send, invokesuper, invokeblock, opt_*), vm_core.h:\ninsns.def:invokeblock\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eYARVの命令は\u003ccode\u003einsns.def\u003c/code\u003eファイルで定義されているので\u003ccode\u003einsns.def\u003c/code\u003eの\u003ccode\u003einvokeblock\u003c/code\u003eを読む。\u003csup id=\"fnref3\"\u003e\u003ca href=\"#fn3\" rel=\"footnote\" title=\"RubyVMの設計についてのドキュメント参考 https://github.com/ruby/ruby/blob/v2_5_1/template/yarvarch.ja\"\u003e3\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"invokeblock\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#invokeblock\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003einvokeblock\u003c/h3\u003e\n\n\u003cp\u003eコメントから見てわかるように\u003ccode\u003eyield\u003c/code\u003eに対応している。\u003cbr\u003e\n\u003ccode\u003evm_invoke_block\u003c/code\u003eを実行してますね。\u003cbr\u003e\nこの辺でgdbで止めてデバッグします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003einsns.def\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cm\"\u003e/**\n  @c method/iterator\n  @e yield(args)\n  @j yield を実行する。\n */\u003c/span\u003e\n\u003cspan class=\"n\"\u003eDEFINE_INSN\u003c/span\u003e\n\u003cspan class=\"nf\"\u003einvokeblock\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCALL_INFO\u003c/span\u003e \u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(...)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// inc += 1 - ci-\u0026gt;orig_argc;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_calling_info\u003c/span\u003e \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eorig_argc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblock_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_BLOCK_HANDLER_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGET_SELF\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\n    \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evm_invoke_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eGET_CFP\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eQundef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eRESTORE_REGS\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eNEXT_INSN\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/insns.def#L938-L959\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/insns.def#L938-L959\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"vm_invoke_block\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#vm_invoke_block\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003evm_invoke_block\u003c/h3\u003e\n\n\u003cp\u003eブロックとして渡された引数があるか確認、ブロックが渡されてなければno block givenの例外を投げる。\u003cbr\u003e\nふつうにrubyで\u003ccode\u003eyield\u003c/code\u003eした際は\u003ccode\u003evm_invoke_iseq_block\u003c/code\u003eが呼ばれるようです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e\n\u003cspan class=\"nf\"\u003evm_invoke_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erb_execution_context_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erb_control_frame_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ereg_cfp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_calling_info\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_call_info\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003eblock_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_CF_BLOCK_HANDLER\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereg_cfp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGET_ISEQ\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_iseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eis_lambda\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eISEQ_TYPE_METHOD\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eISEQ_TYPE_CLASS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eblock_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_BLOCK_HANDLER_NONE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003erb_vm_localjump_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"no block given (yield)\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eQnil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\n  \u003cspan class=\"nl\"\u003eagain:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evm_block_handler_type\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eblock_handler_type_iseq\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_captured_block\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_BH_TO_ISEQ_BLOCK\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evm_invoke_iseq_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereg_cfp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_lambda\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eblock_handler_type_ifunc\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_captured_block\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_BH_TO_IFUNC_BLOCK\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evm_invoke_ifunc_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereg_cfp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eblock_handler_type_proc\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eis_lambda\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock_proc_is_lambda\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVM_BH_TO_PROC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eblock_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evm_proc_to_block_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVM_BH_TO_PROC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eagain\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eblock_handler_type_symbol\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evm_invoke_symbol_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereg_cfp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_BH_TO_SYMBOL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblock_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVM_UNREACHABLE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evm_invoke_block\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eunreachable\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eQnil\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L2695-L2728\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L2695-L2728\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"vm_invoke_iseq_block\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#vm_invoke_iseq_block\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003evm_invoke_iseq_block\u003c/h3\u003e\n\n\u003cp\u003e引数周りのスタックを調整してからYARVのcontrol frameを積んでる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cm\"\u003e/* ruby iseq -\u0026gt; ruby block */\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e\n\u003cspan class=\"nf\"\u003evm_invoke_iseq_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erb_execution_context_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erb_control_frame_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ereg_cfp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                     \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_calling_info\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_call_info\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                     \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eis_lambda\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_captured_block\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erb_iseq_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erb_iseq_check\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earg_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eparam\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ersp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGET_SP\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eargc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eopt_pc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evm_callee_setup_block_arg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ersp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_lambda\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003earg_setup_method\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003earg_setup_block\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n    \u003cspan class=\"n\"\u003eSET_SP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ersp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n    \u003cspan class=\"n\"\u003evm_push_frame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eVM_FRAME_MAGIC_BLOCK\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eis_lambda\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_FRAME_FLAG_LAMBDA\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eVM_GUARDED_PREV_EP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eep\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq_encoded\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eopt_pc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003ersp\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003earg_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_table_size\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003earg_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estack_max\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eQundef\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L2623-L2646\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L2623-L2646\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003estruct rb_captured_block *\u003c/code\u003eからブロックのISeqが取得できることが分かりました。\u003cbr\u003e\n\u003ccode\u003evm_push_frame\u003c/code\u003eまで見ます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erb_iseq_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erb_iseq_check\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"vm_push_frame\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#vm_push_frame\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003evm_push_frame\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003evm_push_frame\u003c/code\u003eのシグネチャは以下\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003erb_control_frame_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n\u003cspan class=\"n\"\u003evm_push_frame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erb_execution_context_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erb_iseq_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003especval\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003ecref_or_me\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003estack_max\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L199-L209\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L199-L209\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003evm_push_frame\u003c/code\u003eの後ろから3番目の引数がspになっているのがわかる。\u003ccode\u003esp\u003c/code\u003eには\u003ccode\u003ersp + arg_size\u003c/code\u003eが入るよう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"n\"\u003evm_push_frame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eVM_FRAME_MAGIC_BLOCK\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eis_lambda\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_FRAME_FLAG_LAMBDA\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eVM_GUARDED_PREV_EP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eep\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq_encoded\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eopt_pc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003ersp\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003earg_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* ここがスタックの底になる */\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_table_size\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003earg_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estack_max\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ersp\u003c/code\u003eと\u003ccode\u003earg_size\u003c/code\u003eは以下のように計算されていますね。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earg_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eparam\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ersp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGET_SP\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eargc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003earg_size\u003c/code\u003eにはブロックのISeqの引数の数の情報が入る。\u003cbr\u003e\nブロックの引数を書かない場合ここの\u003ccode\u003earg_size\u003c/code\u003eが\u003ccode\u003e0\u003c/code\u003eになる。\u003cbr\u003e\n\u003ccode\u003ecalling-\u0026gt;argc\u003c/code\u003eには\u003ccode\u003eyield\u003c/code\u003eに渡した引数の数が入っている、なので\u003ccode\u003e1\u003c/code\u003e。\u003cbr\u003e\n\u003ccode\u003ecalling\u003c/code\u003eの型は\u003ccode\u003estruct rb_calling_info *\u003c/code\u003eで対応するのはこの部分かな?\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e0002 invokeblock      \u0026lt;callinfo!argc:1, ARGS_SIMPLE\u0026gt;\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ersp\u003c/code\u003eには現在のスタックポインターから呼び出し側で\u003ccode\u003eyield\u003c/code\u003eに渡して積んだ引数を引いた部分が入る。\u003cbr\u003e\nつまり引数0のブロックを呼び出す場合いくら\u003ccode\u003eyield\u003c/code\u003eに引数を渡してもブロックの実行前に破棄されてしまうよう。\u003csup id=\"fnref4\"\u003e\u003ca href=\"#fn4\" rel=\"footnote\" title=\"例えば呼び出す際にyield 1, 2, 3するとcalling-\u0026gt;argcは3、なのでスタックに3つ値が積まれた状態だとrspは積まれていない底を指している。新しいスタックの底はrsp + arg_sizeで決定されるので引数0の場合は積んである1, 2, 3は後からスタックを積む際に上書きされて消えてしまう。ブロックが3つ引数を取る場合はrsp + 3で3つの値が積まれた状態を指すようになる。このへん説明難しいのでRubyのしくみを読みましょう...\"\u003e4\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ブロック呼び出し時の動作雑な理解\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E6%99%82%E3%81%AE%E5%8B%95%E4%BD%9C%E9%9B%91%E3%81%AA%E7%90%86%E8%A7%A3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eブロック呼び出し時の動作雑な理解\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ecfpからblock_handlerが取れる\n\n\u003cul\u003e\n\u003cli\u003eblock_handlerは4種類ある\n\n\u003cul\u003e\n\u003cli\u003eiseq\u003c/li\u003e\n\u003cli\u003eifunc\u003c/li\u003e\n\u003cli\u003eproc\u003c/li\u003e\n\u003cli\u003esymbol\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eiseqのblock_handlerからはiseqが取れる\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eiseq-\u0026gt;body-\u0026gt;param.size\u003c/code\u003eが0だと\u003ccode\u003eyield 1, 2, 3, 4, ...\u003c/code\u003eといくら\u003ccode\u003eyield\u003c/code\u003eに引数を渡しても捨てられてしまう\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"b_callでブロックのiseqを書き換えても意味なさ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#b_call%E3%81%A7%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AEiseq%E3%82%92%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%A6%E3%82%82%E6%84%8F%E5%91%B3%E3%81%AA%E3%81%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eb_callでブロックのISeqを書き換えても意味なさ\u003c/h2\u003e\n\n\u003cp\u003e以下のようなプログラムをgdbで実行します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"no\"\u003eTracePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etrace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:b_call\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eyield_self\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eyield\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003evm_invoke_iseq_block\u003c/code\u003eと\u003ccode\u003erb_obj_yield_self\u003c/code\u003eにbreakpointを仕掛けて呼び出される順序を確認。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% gdb $(rbenv which ruby)\nGNU gdb (Gentoo 8.1 p1) 8.1\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-pc-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n\u0026lt;https://bugs.gentoo.org/\u0026gt;.\nFind the GDB manual and other documentation resources online at:\n\u0026lt;http://www.gnu.org/software/gdb/documentation/\u0026gt;.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from /home/sei/.rbenv/versions/2.5.1/bin/ruby...done.\n(gdb) break vm_invoke_iseq_block if rb_vm_top_self() == calling-\u0026gt;recv\nBreakpoint 1 at 0x1850fd: file vm_insnhelper.c, line 2630.\n(gdb) break rb_obj_yield_self\nBreakpoint 2 at 0x909da: file object.c, line 577.\n(gdb) run --disable-gems -e 'TracePoint.trace(:b_call) {|tp| 1.yield_self }; def foo; yield 42; end; foo\n{}'\nStarting program: /home/sei/.rbenv/versions/2.5.1/bin/ruby --disable-gems -e 'TracePoint.trace(:b_call) {|tp| 1.yield_self }; def foo; yield 42; end; foo {}'\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n[New Thread 0x7ffff7ff6700 (LWP 15626)]\nError in testing breakpoint condition:\nCouldn't get registers: そのようなプロセスはありません.\nAn error occurred while in a function called from GDB.\nEvaluation of the expression containing the function\n(rb_vm_top_self) will be abandoned.\nWhen the function is done executing, GDB will silently stop.\nSelected thread is running.\n(gdb) frame 0\n#0  vm_invoke_iseq_block (ec=0x555555a79258, reg_cfp=0x7ffff7fc5f80, calling=0x7fffffffd8b0,\n    ci=0x555555babf60, is_lambda=0, captured=0x7ffff7fc5fc8) at vm_insnhelper.c:2630\n2630        const rb_iseq_t *iseq = rb_iseq_check(captured-\u0026gt;code.iseq);\n(gdb) c\nContinuing.\n\nThread 1 \"ruby\" hit Breakpoint 2, rb_obj_yield_self (obj=3) at object.c:577\n577         RETURN_SIZED_ENUMERATOR(obj, 0, 0, rb_obj_size);\n(gdb) frame 0\n#0  rb_obj_yield_self (obj=3) at object.c:577\n577         RETURN_SIZED_ENUMERATOR(obj, 0, 0, rb_obj_size);\n(gdb) c\nContinuing.\n[Thread 0x7ffff7ff6700 (LWP 15626) exited]\n[Inferior 1 (process 15622) exited normally]\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e見ての通り\u003ccode\u003evm_invoke_block\u003c/code\u003eが呼ばれてから\u003ccode\u003erb_obj_yield_self\u003c/code\u003eが呼び出されている。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003eyield\u003c/code\u003eの引数をスタックに積む\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003einvokeblock\u003c/code\u003eが呼ばれる\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003evm_invoke_block\u003c/code\u003eが呼ばれる\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003evm_invoke_iseq_block\u003c/code\u003eが呼ばれる\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003evm_push_frame\u003c/code\u003eが呼ばれる(このタイミングでスタックに積んだ引数が捨てられる)\u003c/li\u003e\n\u003cli\u003eTracePointの\u003ccode\u003eb_call\u003c/code\u003eが呼ばれる\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e6の段階でISeqを書き換えても5の段階で既に\u003ccode\u003eyield\u003c/code\u003eに渡された値がすてられてしまう。\u003cbr\u003e\nなので書き換えるなら4を呼ぶ前にISeqを書き換えないといけない。\u003c/p\u003e\n\n\u003cp\u003e6の段階のcontrol frameのスタックを見てみると以下のようになっている。\u003cbr\u003e\n0006がyield_selfの呼び出しで、0005がTracePoint作成時に渡したブロック、0004がfooに渡したブロックとなっており、既に制御フレームが積まれているのが分かる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) call rb_vmdebug_stack_dump_raw_current()\n-- Control frame information -----------------------------------------------\nc:0006 p:---- s:0021 e:000020 CFUNC  :yield_self\nc:0005 p:0005 s:0017 e:000016 BLOCK  -e:1 [FINISH]\nc:0004 p:0001 s:0013 e:000012 BLOCK  -e:1\nc:0003 p:0004 s:0010 e:000009 METHOD -e:1\nc:0002 p:0029 s:0006 E:002660 EVAL   -e:1 [FINISH]\nc:0001 p:0000 s:0003 E:000460 (none) [FINISH]\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ブロックのiseqをメソッド呼び出し時に取得する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AEiseq%E3%82%92%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E6%99%82%E3%81%AB%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eブロックのISeqをメソッド呼び出し時に取得する\u003c/h2\u003e\n\n\u003cp\u003e以下のようなコードをgdbで実行して\u003ccode\u003erb_obj_yield_self\u003c/code\u003eにbreakポイントを仕掛けブロックのISeqを取る方法を確認する。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"no\"\u003eTracePoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etrace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:call\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003etp\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eyield_self\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eyield\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとりあえず止まった\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e% gdb $(rbenv which ruby)\nGNU gdb (Gentoo 8.1 p1) 8.1\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-pc-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n\u0026lt;https://bugs.gentoo.org/\u0026gt;.\nFind the GDB manual and other documentation resources online at:\n\u0026lt;http://www.gnu.org/software/gdb/documentation/\u0026gt;.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from /home/sei/.rbenv/versions/2.5.1/bin/ruby...done.\n(gdb) source ~/src/github.com/ruby/ruby/.gdbinit\n(gdb) break rb_obj_yield_self\nBreakpoint 1 at 0x909da: file object.c, line 577.\n(gdb) run --disable-gems -e 'TracePoint.trace(:call) {|tp| 1.yield_self }; def foo; yield 42; end; foo { 42 }\n'\nStarting program: /home/sei/.rbenv/versions/2.5.1/bin/ruby --disable-gems -e 'TracePoint.trace(:call) {|tp| 1.yield_self }; def foo; yield 42; end; foo {}'\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n[New Thread 0x7ffff7ff6700 (LWP 16662)]\n\nThread 1 \"ruby\" hit Breakpoint 1, rb_obj_yield_self (obj=3) at object.c:577\n577         RETURN_SIZED_ENUMERATOR(obj, 0, 0, rb_obj_size);\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eメソッドは2つ上のフレームのよう\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) call rb_vmdebug_stack_dump_raw_current()\n-- Control frame information -----------------------------------------------\nc:0005 p:---- s:0018 e:000017 CFUNC  :yield_self\nc:0004 p:0005 s:0014 e:000013 BLOCK  -e:1 [FINISH]\nc:0003 p:0001 s:0010 e:000009 METHOD -e:1\nc:0002 p:0029 s:0006 E:002660 EVAL   -e:1 [FINISH]\nc:0001 p:0000 s:0003 E:000460 (none) [FINISH]\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e今のcontrol frameは\u003ccode\u003eruby_current_execution_context_ptr\u003c/code\u003eで取れる。\u003csup id=\"fnref5\"\u003e\u003ca href=\"#fn5\" rel=\"footnote\" title=\"Rubyのオブジェクトをプリント出来るデバッグ用のC関数 https://github.com/ruby/ruby/blob/v2_5_1/io.c#L7655\"\u003e5\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) p *(ruby_current_execution_context_ptr-\u0026gt;cfp)\n$40 = {pc = 0x0, sp = 0x7ffff7ec60a0, iseq = 0x0, self = 3, ep = 0x7ffff7ec6098, block_code = 0x0}\n(gdb) call rb_p((ruby_current_execution_context_ptr-\u0026gt;cfp)-\u0026gt;self)\n1\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003ecfpは\u003ccode\u003e--\u003c/code\u003eして伸びる。試しに-したCFPを見ると使われてない空のフレームがあるのが分かる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) p *(ruby_current_execution_context_ptr-\u0026gt;cfp - 1)\n$49 = {pc = 0x0, sp = 0x7ffff7ec60b8, iseq = 0x0, self = 3, ep = 0x7ffff7ec60b0, block_code = 0x0}\n(gdb) p *(ruby_current_execution_context_ptr-\u0026gt;cfp - 2)\n$50 = {pc = 0x0, sp = 0x0, iseq = 0x0, self = 0, ep = 0x0, block_code = 0x0}\n(gdb) p *(ruby_current_execution_context_ptr-\u0026gt;cfp - 3)\n$51 = {pc = 0x0, sp = 0x0, iseq = 0x0, self = 0, ep = 0x0, block_code = 0x0}\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eなので2つ上のメソッド呼び出しのcfpを見るときは\u003ccode\u003e+ 2\u003c/code\u003eすると見れる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) p *(ruby_current_execution_context_ptr-\u0026gt;cfp + 2)\n$23 = {pc = 0x555555babee8, sp = 0x7ffff7ec6060, iseq = 0x555555a95d80, self = 93824998023880,\n  ep = 0x7ffff7ec6058, block_code = 0x0}\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eさきほど見た\u003ccode\u003evm_invoke_block\u003c/code\u003eでブロックハンドラーを取得していた関数\u003ccode\u003eVM_CF_BLOCK_HANDLER\u003c/code\u003eを呼んでみる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) p VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2))\n$52 = 140737353899977\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003evm_invoke_block\u003c/code\u003e同様\u003ccode\u003eVM_BH_TO_ISEQ_BLOCK\u003c/code\u003eを呼んで\u003ccode\u003estruct rb_captured_block *\u003c/code\u003eに変換する。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))\n$54 = (const struct rb_captured_block *) 0x7ffff7fc5fc8\n(gdb) p *VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))\n$55 = {self = 93824998023880, ep = 0x555555bb0090, code = {iseq = 0x555555a95c90,\n    ifunc = 0x555555a95c90, val = 93824997743760}}\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003evm_invoke_block_iseq\u003c/code\u003eのようにiseqにアクセスしてみる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.iseq\n$56 = (const rb_iseq_t *) 0x555555a95c90\n(gdb) p *VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.iseq\n$57 = {flags = 28698, reserved1 = 0, body = 0x555555babfb0, aux = {compile_data = 0x8, loader = {\n      obj = 8, index = 0}, trace_events = 8}}\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこのままだとよくわからないのでdisasmした結果を見てみる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) call rb_p(rb_iseq_disasm(VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.iseq))\n\"== disasm: #\u0026lt;ISeq:block in \u0026lt;main\u0026gt;@-e:1 (1,74)-(1,80)\u0026gt;===================\\n== catch table\\n| catch type: redo   st: 0001 ed: 0003 sp: 0000 cont: 0001\\n| catch type: next   st: 0001 ed: 0003 sp: 0000 cont: 0003\\n|------------------------------------------------------------------------\\n0000 nop                                                              (   1)[Bc]\\n0001 putobject        42[Li]\\n0003 leave            [Br]\\n\"\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e目的のブロックが取れている。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ブロックのiseqを書き換える\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AEiseq%E3%82%92%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eブロックのISeqを書き換える\u003c/h2\u003e\n\n\u003cp\u003eこの辺のうちflagsはそれぞれの種類の引数があるかどうかをあらわしている。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.iseq-\u0026gt;body.param\n$70 = {flags = {has_lead = 0, has_opt = 0, has_rest = 0, has_post = 0, has_kw = 0, has_kwrest = 0,\n    has_block = 0, ambiguous_param0 = 0}, size = 0, lead_num = 0, opt_num = 0, rest_start = 0,\n  post_start = 0, post_num = 0, block_start = 0, opt_table = 0x0, keyword = 0x0}\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003efoo {|x| x }\u003c/code\u003eのような、１つ引数を取るブロックの場合は以下のようになっている。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.iseq-\u0026gt;body.param\n$71 = {flags = {has_lead = 1, has_opt = 0, has_rest = 0, has_post = 0, has_kw = 0, has_kwrest = 0,\n    has_block = 0, ambiguous_param0 = 1}, size = 1, lead_num = 1, opt_num = 0, rest_start = 0,\n  post_start = 0, post_num = 0, block_start = 0, opt_table = 0x0, keyword = 0x0}\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eそれに合わせて\u003ccode\u003eflags\u003c/code\u003eの\u003ccode\u003ehas_lead\u003c/code\u003eと\u003ccode\u003esize\u003c/code\u003eと\u003ccode\u003eambiguous_param0\u003c/code\u003eを1に書き換えていく。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.iseq-\u0026gt;body.param.flags.ambiguous_param0 = 1\n$75 = 1\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.iseq-\u0026gt;body.param.flags.has_lead = 1\n$76 = 1\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.iseq-\u0026gt;body.param.size = 1\n$77 = 1\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.iseq-\u0026gt;body.param\n$78 = {flags = {has_lead = 1, has_opt = 0, has_rest = 0, has_post = 0, has_kw = 0, has_kwrest = 0,\n    has_block = 0, ambiguous_param0 = 1}, size = 1, lead_num = 0, opt_num = 0, rest_start = 0,\n  post_start = 0, post_num = 0, block_start = 0, opt_table = 0x0, keyword = 0x0}\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれでスタックに値が積まれているはず、continueしてみる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) c\nContinuing.\n-e:1: [BUG] Stack consistency error (sp: 14, bp: 13)\nruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]\n\n-- Control frame information -----------------------------------------------\nc:0004 p:0004 s:0014 e:000013 BLOCK  -e:1\nc:0003 p:0004 s:0010 e:000009 METHOD -e:1\nc:0002 p:0029 s:0006 E:002680 EVAL   -e:1 [FINISH]\nc:0001 p:0000 s:0003 E:000460 (none) [FINISH]\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eエラーが出る。\u003ccode\u003egit grep\u003c/code\u003eでエラーメッセージを調べると以下がヒット。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\n\u003cspan class=\"nf\"\u003evm_stack_consistency_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erb_execution_context_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n               \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erb_control_frame_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n               \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ebp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eptrdiff_t\u003c/span\u003e \u003cspan class=\"n\"\u003ensp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_SP_CNT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eptrdiff_t\u003c/span\u003e \u003cspan class=\"n\"\u003enbp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_SP_CNT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003estack_consistency_error\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\"Stack consistency error (sp: %\"\u003c/span\u003e\u003cspan class=\"n\"\u003ePRIdPTRDIFF\u003c/span\u003e\u003cspan class=\"s\"\u003e\", bp: %\"\u003c/span\u003e\u003cspan class=\"n\"\u003ePRIdPTRDIFF\u003c/span\u003e\u003cspan class=\"s\"\u003e\")\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if defined RUBY_DEVEL\n\u003c/span\u003e    \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003emesg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erb_sprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estack_consistency_error\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ensp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enbp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erb_str_cat_cstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emesg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erb_str_append\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emesg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erb_iseq_disasm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erb_exc_fatal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erb_exc_new3\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erb_eFatal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emesg\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e    \u003cspan class=\"n\"\u003erb_bug\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estack_consistency_error\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ensp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enbp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L3329-L3346\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L3329-L3346\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003evm_stack_consistency_error\u003c/code\u003eで探すと\u003ccode\u003eleave\u003c/code\u003eする際にしかこのエラーは出ないよう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003einsns.def\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cm\"\u003e/**\n  @c method/iterator\n  @e return from this scope.\n  @j このスコープから抜ける。\n */\u003c/span\u003e\n\u003cspan class=\"n\"\u003eDEFINE_INSN\u003c/span\u003e\n\u003cspan class=\"nf\"\u003eleave\u003c/span\u003e\n\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOPT_CHECKED_RUN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ebp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evm_base_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereg_cfp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereg_cfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esp\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ebp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evm_stack_consistency_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereg_cfp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\n    \u003cspan class=\"n\"\u003eRUBY_VM_CHECK_INTS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evm_pop_frame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eGET_CFP\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eGET_EP\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if OPT_CALL_THREADED_CODE\n\u003c/span\u003e    \u003cspan class=\"n\"\u003erb_ec_thread_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eretval\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eRESTORE_REGS\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/insns.def#L961-L992\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/insns.def#L961-L992\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003evm_base_ptr\u003c/code\u003eの計算を見てみる\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n\u003cspan class=\"nf\"\u003evm_base_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erb_control_frame_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erb_control_frame_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eprev_cfp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRUBY_VM_PREVIOUS_CONTROL_FRAME\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_FRAME_RUBYFRAME_P\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ebp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprev_cfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esp\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_table_size\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_ENV_DATA_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eISEQ_TYPE_METHOD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* adjust `self' */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ebp\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if VM_DEBUG_BP_CHECK\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebp\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebp_check\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"bp_check: %ld, bp: %ld\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebp_check\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eGET_EC\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003evm_stack\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003ebp\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eGET_EC\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003evm_stack\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003erb_bug\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"vm_base_ptr: unreachable\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ebp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L1522-L1546\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L1522-L1546\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003elocal_table_size\u003c/code\u003eの書き換えが必要。\u003c/p\u003e\n\n\u003cp\u003eもう一度同じところまで進めてlocal_table_sizeも合わせて書き換える\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.ise\nq-\u0026gt;body.local_table_size\n$82 = 0\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u0026gt;cfp + 2)))-\u0026gt;code.iseq-\u0026gt;body.local_table_size = 1\n(gdb) c\nContinuing.\n[Thread 0x7ffff7ff6700 (LWP 20326) exited]\n[Inferior 1 (process 20325) exited normally]\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e正常終了するようになった\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"積まれた引数を取得する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%A9%8D%E3%81%BE%E3%82%8C%E3%81%9F%E5%BC%95%E6%95%B0%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e積まれた引数を取得する\u003c/h2\u003e\n\n\u003cp\u003eブロックを書き換えて、CFPに\u003ccode\u003eyield\u003c/code\u003eに渡された値が捨てられずにスタックに積まれたままになった。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003evm_invoke_iseq_block\u003c/code\u003eを呼び出したcfpでは\u003ccode\u003eSET_SP(rsp);\u003c/code\u003eでspが\u003ccode\u003eyield\u003c/code\u003eで積んだとこを指してるので、\u003ccode\u003evm_invoke_block\u003c/code\u003eを呼び出したcfpのspにアクセスすると取れる。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"スタックの様子\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%81%AE%E6%A7%98%E5%AD%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eスタックの様子\u003c/h3\u003e\n\n\u003cp\u003eブロック呼び出し時のスタックの様子\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e\n\u003cspan class=\"nf\"\u003evm_invoke_iseq_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erb_execution_context_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erb_control_frame_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ereg_cfp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                     \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_calling_info\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_call_info\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                     \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eis_lambda\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003erb_captured_block\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erb_iseq_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erb_iseq_check\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earg_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eparam\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ersp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGET_SP\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eargc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eopt_pc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evm_callee_setup_block_arg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecalling\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eci\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ersp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_lambda\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003earg_setup_method\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003earg_setup_block\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの時点ではこういう感じ、\u003ccode\u003ecfp-\u0026gt;sp\u003c/code\u003eが引数の1つ上を指してる。引数の個数が1つなんでrspはspの1つ下\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/68add8fe640e9a0f7ee37d90f46f7a7e93f2926b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f37613962623263332d633333662d633961632d316236352d3430373730616332633337312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/68add8fe640e9a0f7ee37d90f46f7a7e93f2926b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f37613962623263332d633333662d633961632d316236352d3430373730616332633337312e706e67\" alt=\"_home_sei_src_github.com_hanachin_stackgraph_index.html.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/2074/7a9bb2c3-c33f-c9ac-1b65-40770ac2c371.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\n    \u003cspan class=\"n\"\u003eSET_SP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ersp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eSET_SP\u003c/code\u003e呼び出すと\u003ccode\u003ecfp-\u0026gt;sp\u003c/code\u003eがここに移動する\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/32b2594741a27b1985a204c6571a637dc91bb1f7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f65643861383734322d396465332d326166342d633331622d3732333034306464363161632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/32b2594741a27b1985a204c6571a637dc91bb1f7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f65643861383734322d396465332d326166342d633331622d3732333034306464363161632e706e67\" alt=\"_home_sei_src_github.com_hanachin_stackgraph_index.html (2).png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/2074/ed8a8742-9de3-2af4-c31b-723040dd61ac.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003evm_push_frame呼び出す\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\n    \u003cspan class=\"n\"\u003evm_push_frame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eVM_FRAME_MAGIC_BLOCK\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eis_lambda\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eVM_FRAME_FLAG_LAMBDA\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eVM_GUARDED_PREV_EP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecaptured\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eep\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq_encoded\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eopt_pc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003ersp\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003earg_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_table_size\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003earg_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estack_max\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eQundef\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L2623-L2646\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L2623-L2646\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003evm_push_frame\u003c/code\u003eでは新しいcfpが作られる\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evm_insnhelper.c\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003erb_control_frame_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n\u003cspan class=\"nf\"\u003evm_push_frame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erb_execution_context_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erb_iseq_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003especval\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"n\"\u003ecref_or_me\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003estack_max\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erb_control_frame_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\n    \u003cspan class=\"n\"\u003evm_check_frame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003especval\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecref_or_me\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVM_ASSERT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_size\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n    \u003cspan class=\"cm\"\u003e/* check stack overflow */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCHECK_VM_STACK_OVERFLOW0\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_size\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003estack_max\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n    \u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\n    \u003cspan class=\"cm\"\u003e/* setup new frame */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVALUE\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003epc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erb_iseq_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003eiseq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eself\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eblock_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\n    \u003cspan class=\"cm\"\u003e/* setup vm value stack */\u003c/span\u003e\n\n\n    \u003cspan class=\"cm\"\u003e/* initialize local variables */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_size\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esp\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eQnil\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\n    \u003cspan class=\"cm\"\u003e/* setup ep with managing data */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVM_ASSERT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVM_ENV_DATA_INDEX_ME_CREF\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVM_ASSERT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVM_ENV_DATA_INDEX_SPECVAL\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVM_ASSERT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVM_ENV_DATA_INDEX_FLAGS\u003c/span\u003e   \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esp\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecref_or_me\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* ep[-2] / Qnil or T_IMEMO(cref) or T_IMEMO(ment) */\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esp\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especval\u003c/span\u003e     \u003cspan class=\"cm\"\u003e/* ep[-1] / block handler or prev env ptr */\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esp\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e       \u003cspan class=\"cm\"\u003e/* ep[-0] / ENV_FLAGS */\u003c/span\u003e\n\n\n    \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esp\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\n\u003cspan class=\"cp\"\u003e#if VM_DEBUG_BP_CHECK\n\u003c/span\u003e    \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebp_check\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esp\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVMDEBUG\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSDR\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L199-L255\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L199-L255\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこのときISeqのブロックの引数が0の時と引数1のときでは\u003ccode\u003evm_push_frame\u003c/code\u003eに渡されるspの位置がこういう感じでずれている。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/5ccc6ff3ba95faedca777a7839fdf2dc4fb153fb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f39663063333263362d363964362d653764332d326636372d3331343433643461386162302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/5ccc6ff3ba95faedca777a7839fdf2dc4fb153fb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f39663063333263362d363964362d653764332d326636372d3331343433643461386162302e706e67\" alt=\"_home_sei_src_github.com_hanachin_stackgraph_index.html (3).png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/2074/9f0c32c6-69d6-e7d3-2f67-31443d4a8ab0.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eISeqの引数0のときはこういう感じでspに積まれていた42が上書きされてしまう。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/be7659967b9cd35e255d1f1a8612141afd450546/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f38323732386662372d363762372d303765612d333432362d6161313363306434383238352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/be7659967b9cd35e255d1f1a8612141afd450546/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f38323732386662372d363762372d303765612d333432362d6161313363306434383238352e706e67\" alt=\"_home_sei_src_github.com_hanachin_stackgraph_index.html (4).png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/2074/82728fb7-67b7-07ea-3426-aa13c0d48285.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eISeqの引数が1のときはこういう感じで上書きされず残っている\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/a4de1b9c9d07c065a6fdff103a17b744a66a6415/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f65306337353766312d393835622d343530622d376466332d3633626439633535356564662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/a4de1b9c9d07c065a6fdff103a17b744a66a6415/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f65306337353766312d393835622d343530622d376466332d3633626439633535356564662e706e67\" alt=\"_home_sei_src_github.com_hanachin_stackgraph_index.html (5).png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/2074/e0c757f1-985b-450b-7df3-63bd9c555edf.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"積まれた引数を取るメソッドを生やす\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%A9%8D%E3%81%BE%E3%82%8C%E3%81%9F%E5%BC%95%E6%95%B0%E3%82%92%E5%8F%96%E3%82%8B%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E7%94%9F%E3%82%84%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e積まれた引数を取るメソッドを生やす\u003c/h3\u003e\n\n\u003cp\u003eこういうプログラムだと\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eyield\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eit\u003c/code\u003eメソッド呼び出した際のcontrol frameのスタックはこうなっている\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/ba43e44bede33832c58e19cc142915ce5862ed9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f30353835313438372d653832322d643835302d666434362d3637393338336365383933612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/ba43e44bede33832c58e19cc142915ce5862ed9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f30353835313438372d653832322d643835302d666434362d3637393338336365383933612e706e67\" alt=\"_home_sei_src_github.com_hanachin_stackgraph_index.html (7).png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/2074/05851487-e822-d850-fd46-679383ce893a.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eなので\u003ccode\u003eit\u003c/code\u003eで積まれた引数を取るには以下のような感じの2通りのやり方で取れる\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eit\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ここで1つ上のcfpを参照するとブロックのcfpが取れる、1つ上のcfp-\u0026gt;ep - 3にアクセスする\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# or\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ここで2つ上のcfpを参照するとブロックを呼び出したときのcfpが取れる、メソッド呼び出し時のcfp-\u0026gt;spにアクセスする\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/12eb33aeae2b48fbf837ed434f8d8493d50b049a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f36353739653463302d313837652d373036312d636130312d3331323364626630633438622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/12eb33aeae2b48fbf837ed434f8d8493d50b049a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323037342f36353739653463302d313837652d373036312d636130312d3331323364626630633438622e706e67\" alt=\"_home_sei_src_github.com_hanachin_stackgraph_index.html (6).png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/2074/6579e4c0-187e-7061-ca01-3123dbf0c48b.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"実装\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A3%85\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実装\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003erb_control_frame_t\u003c/code\u003eの型などはrubyのAPIとしてinclude出来るヘッダーが公開されていないので必要な部分をコピーしてくる。\u003c/p\u003e\n\n\u003cp\u003eバージョンごとに構造体が違うのでバージョンごとの定義を用意する。\u003cbr\u003e\n\u003ca href=\"https://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it_20500.h\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it_20500.h\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it_20600.h\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it_20600.h\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eRUBY_API_VERSION\u003c/code\u003eで分岐して各バージョンにあった定義を読み込む。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ethats_it_20600.h\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#if RUBY_API_VERSION_CODE \u0026gt;= 20600\n#include \"thats_it_20600.h\"\n#elif RUBY_API_VERSION_CODE \u0026gt;= 20500\n#include \"thats_it_20500.h\"\n#endif\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it.h#L11-L15\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it.h#L11-L15\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e現在実行中のcontrol frameはこんな感じでexternしておいて\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eextern\u003c/span\u003e \u003cspan class=\"n\"\u003erb_execution_context_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eruby_current_execution_context_ptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこうやれば取れる\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eruby_current_execution_context_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecfp\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003econtrol frameやiseq書き換え周りはCで書いている。\u003cbr\u003e\n\u003ca href=\"https://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it.c\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it.c\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eTracePoint仕掛けるのはrubyの方が楽に書けそうなのでrubyで書いた。\u003cbr\u003e\n\u003ca href=\"https://github.com/hanachin/thats_it/blob/master/lib/thats_it.rb\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/hanachin/thats_it/blob/master/lib/thats_it.rb\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h2\u003e\n\n\u003cp\u003eC拡張を書けばTracePointでメソッド呼び出し時に強引にブロックのISeqを取得できる。\u003cbr\u003e\nメソッド呼び出し時のタイミングであれば渡されたブロックのISeqを書き換えられる。\u003cbr\u003e\nブロックは呼び出されるまで評価されないためISeqを実行する前にISeqを書き換えられる。\u003c/p\u003e\n\n\u003cp\u003eマクロだーーー!!!\u003c/p\u003e\n\n\u003cp\u003e完\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\n\u003cli id=\"fn1\"\u003e\n\u003cp\u003e実際には書き換え後のコードと同様の動きをするわけではない。ローカル変数\u003ccode\u003eit\u003c/code\u003eには何も入っておらず\u003ccode\u003eit\u003c/code\u003eは変数参照ではなくメソッド呼び出しとなっている。RubyVMとISeqの動作はRubyのコードで表現できないので雰囲気だけ掴んでもらえれば。 \u003ca href=\"#fnref1\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn2\"\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/ruby/tree/v2_5_1\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/tree/v2_5_1\u003c/a\u003e \u003ca href=\"#fnref2\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn3\"\u003e\n\u003cp\u003eRubyVMの設計についてのドキュメント参考 \u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/template/yarvarch.ja\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/template/yarvarch.ja\u003c/a\u003e \u003ca href=\"#fnref3\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn4\"\u003e\n\u003cp\u003e例えば呼び出す際に\u003ccode\u003eyield 1, 2, 3\u003c/code\u003eすると\u003ccode\u003ecalling-\u0026gt;argc\u003c/code\u003eは\u003ccode\u003e3\u003c/code\u003e、なのでスタックに3つ値が積まれた状態だと\u003ccode\u003ersp\u003c/code\u003eは積まれていない底を指している。新しいスタックの底は\u003ccode\u003ersp + arg_size\u003c/code\u003eで決定されるので引数0の場合は積んである1, 2, 3は後からスタックを積む際に上書きされて消えてしまう。ブロックが3つ引数を取る場合は\u003ccode\u003ersp + 3\u003c/code\u003eで3つの値が積まれた状態を指すようになる。このへん説明難しいのでRubyのしくみを読みましょう... \u003ca href=\"#fnref4\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn5\"\u003e\n\u003cp\u003eRubyのオブジェクトをプリント出来るデバッグ用のC関数 \u003ca href=\"https://github.com/ruby/ruby/blob/v2_5_1/io.c#L7655\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ruby/ruby/blob/v2_5_1/io.c#L7655\u003c/a\u003e \u003ca href=\"#fnref5\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003c/ol\u003e\n\u003c/div\u003e\n","body":"## TL;DR\ngroovyやKotlinの`it`のようにブロックに渡された値を`it`で参照できる`thats_it`gemの紹介です。\n\n```rb\nrequire \"thats_it\"\n\n[1, 2, 3].map { it * 2 }\n# =\u003e [2, 4, 6]\n```\n\n便利ですね。\n\n了\n\n## Kotlinやgroovyのitとは\n\nラムダ式が1つしかパラメーターを取らない場合、そのパラメーターを宣言しなくても暗黙的に宣言された「it」変数でそのパラメーターを参照できる便利機能。\n\n### 参考\n\n[Higher-Order Functions and Lambdas - Kotlin Programming Language it: implicit name of a single parameter][kotlin]\n[The Apache Groovy programming language - Closures 2.2. Implicit parameter][groovy]\n\n[kotlin]: https://kotlinlang.org/docs/reference/lambdas.html#it-implicit-name-of-a-single-parameter\n[groovy]: http://groovy-lang.org/closures.html#implicit-it\n\n## 忙しい人向けの実装方法解説\n\nブロックが取る引数が0かつ`it`の呼び出しがある場合にブロックのISeqを書き換えてブロックが1つ引数を取ることにする。[^いいわけ]\n\n[^いいわけ]: 実際には書き換え後のコードと同様の動きをするわけではない。ローカル変数`it`には何も入っておらず`it`は変数参照ではなくメソッド呼び出しとなっている。RubyVMとISeqの動作はRubyのコードで表現できないので雰囲気だけ掴んでもらえれば。\n\n```rb\n# 書き換え前\n1.yield_self { it }\n# 書き換え後\n1.yield_self {|it| it }\n```\n\n了\n\n## どのタイミングでブロックを書き換えるか\n\nTracePointを使いメソッド呼び出しのタイミングでメソッドに渡されたブロックのISeqを取得し書き換える。\n\n```rb\n# Rubyで書かれたメソッドの呼び出し時に呼ばれる\nTracePoint.trace(:call) do |tp|\n  # ここで書き換える\nend\n\n# Cで書かれたメソッドの呼び出し時に呼ばれる\nTracePoint.trace(:c_call) do |tp|\n  # ここで書き換える\nend\n```\n\nブロックが呼び出されるタイミングで呼び出される`b_call`というイベントもあるがそこではISeqを書き換えられない。理由は後述。\n\n## ブロックが持っている情報\n\nブロックのISeqにはブロックが取る引数の情報が保持されている。\n以下のような引数を取る場合のISeqを確認してみる。\n\n```rb\n42.yield_self {|it| it }\n```\n\nrubyではオプションで`--dump=insns`を渡すとISeqを確認できる。\n\n```\n% ruby -v --dump=insns -e '42.yield_self {|it| it }'\nruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]\n== disasm: #\u003cISeq:\u003cmain\u003e@-e:1 (1,0)-(1,24)\u003e=============================\n== catch table\n| catch type: break  st: 0000 ed: 0006 sp: 0000 cont: 0006\n== disasm: #\u003cISeq:block in \u003cmain\u003e@-e:1 (1,14)-(1,24)\u003e===================\n== catch table\n| catch type: redo   st: 0001 ed: 0003 sp: 0000 cont: 0001\n| catch type: next   st: 0001 ed: 0003 sp: 0000 cont: 0003\n|------------------------------------------------------------------------\nlocal table (size: 1, argc: 1 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])\n[ 1] it\u003cArg\u003e\n0000 nop                                                              (   1)[Bc]\n0001 getlocal_OP__WC__0 it[Li]\n0003 leave            [Br]\n|------------------------------------------------------------------------\n0000 putobject        42                                              (   1)[Li]\n0002 send             \u003ccallinfo!mid:yield_self, argc:0\u003e, \u003ccallcache\u003e, block in \u003cmain\u003e\n0006 leave\n```\n\nブロックのISeqを確認してみると以下のように引数を1つ取ることが分かる。\n\n\u003e local table (size: 1, argc: 1 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])\n\n一方ブロックが引数を取らない場合はローカル変数が無いので以下のようにlocal tableが省略して表示される。\n表示されていないだけで、実際にはlocal tableの情報は引数を渡さない場合もブロックのISeqに保持されており、`size: 0, argc: 0`となっている。\n\n```\n% ruby -v --dump=insns -e '42.yield_self { it }'\nruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]\n== disasm: #\u003cISeq:\u003cmain\u003e@-e:1 (1,0)-(1,20)\u003e=============================\n== catch table\n| catch type: break  st: 0000 ed: 0006 sp: 0000 cont: 0006\n== disasm: #\u003cISeq:block in \u003cmain\u003e@-e:1 (1,14)-(1,20)\u003e===================\n== catch table\n| catch type: redo   st: 0001 ed: 0005 sp: 0000 cont: 0001\n| catch type: next   st: 0001 ed: 0005 sp: 0000 cont: 0005\n|------------------------------------------------------------------------\n0000 nop                                                              (   1)[Bc]\n0001 putself          [Li]\n0002 opt_send_without_block \u003ccallinfo!mid:it, argc:0, FCALL|VCALL|ARGS_SIMPLE\u003e, \u003ccallcache\u003e\n0005 leave            [Br]\n|------------------------------------------------------------------------\n0000 putobject        42                                              (   1)[Li]\n0002 send             \u003ccallinfo!mid:yield_self, argc:0\u003e, \u003ccallcache\u003e, block in \u003cmain\u003e\n0006 leave\n```\n\n## ブロック呼び出し周りのRubyVMの動作\n\nブロックを呼び出すコードを読めばブロックのISeqを取る方法やどう書き換えればいいかがが分かる。\n\n以下のようなブロックを呼び出す内容のプログラムのISeqを確認する。\n\n```rb\ndef foo\n  yield 42\nend\n```\n\n```\n% ruby -v --dump=insns -e 'def foo; yield 42; end'\nruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]\n== disasm: #\u003cISeq:\u003cmain\u003e@-e:1 (1,0)-(1,22)\u003e=============================\n0000 putspecialobject 1                                               (   1)[Li]\n0002 putobject        :foo\n0004 putiseq          foo\n0006 opt_send_without_block \u003ccallinfo!mid:core#define_method, argc:2, ARGS_SIMPLE\u003e, \u003ccallcache\u003e\n0009 leave\n== disasm: #\u003cISeq:foo@-e:1 (1,0)-(1,22)\u003e================================\n0000 putobject        42                                              (   1)[LiCa]\n0002 invokeblock      \u003ccallinfo!argc:1, ARGS_SIMPLE\u003e\n0004 leave            [Re]\n```\n\n`invokeblock`命令で呼び出しているよう。ruby/rubyをcloneしてgit grepする[^ruby/ruby]。\n\n```\n% git grep invokeblock\nbootstraptest/test_insns.rb:  [ 'invokeblock',            \u003c\u003c~'},', ], # {\ncompile.c:\tADD_INSN1(ret, line, invokeblock, new_callinfo(iseq, 0, FIX2INT(argc), flag, keywords, FALSE));\ndoc/ChangeLog-1.9.3:\t* insns.def (invokeblock): fix of splat argument.\ndoc/ChangeLog-1.9.3:\t* insns.def (invokeblock): check block is created by lambda\ndoc/ChangeLog-2.0.0:\t* insns.def (send, invokesuper, invokeblock, opt_*), vm_core.h:\ninsns.def:invokeblock\n```\n\nYARVの命令は`insns.def`ファイルで定義されているので`insns.def`の`invokeblock`を読む。[^yarvarch]\n\n[^ruby/ruby]: https://github.com/ruby/ruby/tree/v2_5_1\n[^yarvarch]: RubyVMの設計についてのドキュメント参考 https://github.com/ruby/ruby/blob/v2_5_1/template/yarvarch.ja\n\n### invokeblock\n\nコメントから見てわかるように`yield`に対応している。\n`vm_invoke_block`を実行してますね。\nこの辺でgdbで止めてデバッグします。\n\n```c:insns.def\n/**\n  @c method/iterator\n  @e yield(args)\n  @j yield を実行する。\n */\nDEFINE_INSN\ninvokeblock\n(CALL_INFO ci)\n(...)\n(VALUE val)  // inc += 1 - ci-\u003eorig_argc;\n{\n    struct rb_calling_info calling;\n    calling.argc = ci-\u003eorig_argc;\n    calling.block_handler = VM_BLOCK_HANDLER_NONE;\n    calling.recv = GET_SELF();\n\n\n    val = vm_invoke_block(ec, GET_CFP(), \u0026calling, ci);\n    if (val == Qundef) {\n        RESTORE_REGS();\n        NEXT_INSN();\n    }\n}\n```\nhttps://github.com/ruby/ruby/blob/v2_5_1/insns.def#L938-L959\n\n### vm_invoke_block\n\nブロックとして渡された引数があるか確認、ブロックが渡されてなければno block givenの例外を投げる。\nふつうにrubyで`yield`した際は`vm_invoke_iseq_block`が呼ばれるようです。\n\n```vm_insnhelper.c\nstatic VALUE\nvm_invoke_block(rb_execution_context_t *ec, rb_control_frame_t *reg_cfp, struct rb_calling_info *calling, const struct rb_call_info *ci)\n{\n    VALUE block_handler = VM_CF_BLOCK_HANDLER(reg_cfp);\n    VALUE type = GET_ISEQ()-\u003ebody-\u003elocal_iseq-\u003ebody-\u003etype;\n    int is_lambda = FALSE;\n\n\n    if ((type != ISEQ_TYPE_METHOD \u0026\u0026 type != ISEQ_TYPE_CLASS) ||\n        block_handler == VM_BLOCK_HANDLER_NONE) {\n        rb_vm_localjump_error(\"no block given (yield)\", Qnil, 0);\n    }\n\n\n  again:\n    switch (vm_block_handler_type(block_handler)) {\n      case block_handler_type_iseq:\n        {\n            const struct rb_captured_block *captured = VM_BH_TO_ISEQ_BLOCK(block_handler);\n            return vm_invoke_iseq_block(ec, reg_cfp, calling, ci, is_lambda, captured);\n        }\n      case block_handler_type_ifunc:\n        {\n            const struct rb_captured_block *captured = VM_BH_TO_IFUNC_BLOCK(block_handler);\n            return vm_invoke_ifunc_block(ec, reg_cfp, calling, ci, captured);\n        }\n      case block_handler_type_proc:\n        is_lambda = block_proc_is_lambda(VM_BH_TO_PROC(block_handler));\n        block_handler = vm_proc_to_block_handler(VM_BH_TO_PROC(block_handler));\n        goto again;\n      case block_handler_type_symbol:\n        return vm_invoke_symbol_block(ec, reg_cfp, calling, ci, VM_BH_TO_SYMBOL(block_handler));\n    }\n    VM_UNREACHABLE(vm_invoke_block: unreachable);\n    return Qnil;\n}\n```\nhttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L2695-L2728\n\n### vm_invoke_iseq_block\n\n引数周りのスタックを調整してからYARVのcontrol frameを積んでる。\n\n```vm_insnhelper.c\n/* ruby iseq -\u003e ruby block */\n\n\nstatic VALUE\nvm_invoke_iseq_block(rb_execution_context_t *ec, rb_control_frame_t *reg_cfp,\n                     struct rb_calling_info *calling, const struct rb_call_info *ci,\n                     int is_lambda, const struct rb_captured_block *captured)\n{\n    const rb_iseq_t *iseq = rb_iseq_check(captured-\u003ecode.iseq);\n    const int arg_size = iseq-\u003ebody-\u003eparam.size;\n    VALUE * const rsp = GET_SP() - calling-\u003eargc;\n    int opt_pc = vm_callee_setup_block_arg(ec, calling, ci, iseq, rsp, is_lambda ? arg_setup_method : arg_setup_block);\n\n\n    SET_SP(rsp);\n\n\n    vm_push_frame(ec, iseq,\n                  VM_FRAME_MAGIC_BLOCK | (is_lambda ? VM_FRAME_FLAG_LAMBDA : 0),\n                  captured-\u003eself,\n                  VM_GUARDED_PREV_EP(captured-\u003eep), 0,\n                  iseq-\u003ebody-\u003eiseq_encoded + opt_pc,\n                  rsp + arg_size,\n                  iseq-\u003ebody-\u003elocal_table_size - arg_size, iseq-\u003ebody-\u003estack_max);\n\n\n    return Qundef;\n}\n```\nhttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L2623-L2646\n\n\n`struct rb_captured_block *`からブロックのISeqが取得できることが分かりました。\n`vm_push_frame`まで見ます。\n\n```vm_insnhelper.c\n    const rb_iseq_t *iseq = rb_iseq_check(captured-\u003ecode.iseq);\n```\n\n### vm_push_frame\n\n`vm_push_frame`のシグネチャは以下\n\n```vm_insnhelper.c\nstatic inline rb_control_frame_t *\nvm_push_frame(rb_execution_context_t *ec,\n\t      const rb_iseq_t *iseq,\n\t      VALUE type,\n\t      VALUE self,\n\t      VALUE specval,\n\t      VALUE cref_or_me,\n\t      const VALUE *pc,\n\t      VALUE *sp,\n\t      int local_size,\n\t      int stack_max)\n```\nhttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L199-L209\n\n`vm_push_frame`の後ろから3番目の引数がspになっているのがわかる。`sp`には`rsp + arg_size`が入るよう。\n\n```vm_insnhelper.c\n    vm_push_frame(ec, iseq,\n                  VM_FRAME_MAGIC_BLOCK | (is_lambda ? VM_FRAME_FLAG_LAMBDA : 0),\n                  captured-\u003eself,\n                  VM_GUARDED_PREV_EP(captured-\u003eep), 0,\n                  iseq-\u003ebody-\u003eiseq_encoded + opt_pc,\n                  rsp + arg_size, /* ここがスタックの底になる */\n                  iseq-\u003ebody-\u003elocal_table_size - arg_size, iseq-\u003ebody-\u003estack_max);\n```\n\n`rsp`と`arg_size`は以下のように計算されていますね。\n\n```vm_insnhelper.c\n    const int arg_size = iseq-\u003ebody-\u003eparam.size;\n    VALUE * const rsp = GET_SP() - calling-\u003eargc;\n```\n\n`arg_size`にはブロックのISeqの引数の数の情報が入る。\nブロックの引数を書かない場合ここの`arg_size`が`0`になる。\n`calling-\u003eargc`には`yield`に渡した引数の数が入っている、なので`1`。\n`calling`の型は`struct rb_calling_info *`で対応するのはこの部分かな?\n\n```\n0002 invokeblock      \u003ccallinfo!argc:1, ARGS_SIMPLE\u003e\n```\n\n`rsp`には現在のスタックポインターから呼び出し側で`yield`に渡して積んだ引数を引いた部分が入る。\nつまり引数0のブロックを呼び出す場合いくら`yield`に引数を渡してもブロックの実行前に破棄されてしまうよう。[^argc]\n\n[^argc]: 例えば呼び出す際に`yield 1, 2, 3`すると`calling-\u003eargc`は`3`、なのでスタックに3つ値が積まれた状態だと`rsp`は積まれていない底を指している。新しいスタックの底は`rsp + arg_size`で決定されるので引数0の場合は積んである1, 2, 3は後からスタックを積む際に上書きされて消えてしまう。ブロックが3つ引数を取る場合は`rsp + 3`で3つの値が積まれた状態を指すようになる。このへん説明難しいのでRubyのしくみを読みましょう...\n\n## ブロック呼び出し時の動作雑な理解\n\n- cfpからblock_handlerが取れる\n  - block_handlerは4種類ある\n     - iseq\n     - ifunc\n     - proc\n     - symbol\n- iseqのblock_handlerからはiseqが取れる\n- `iseq-\u003ebody-\u003eparam.size`が0だと`yield 1, 2, 3, 4, ...`といくら`yield`に引数を渡しても捨てられてしまう\n\n## b_callでブロックのISeqを書き換えても意味なさ\n\n以下のようなプログラムをgdbで実行します。\n\n```rb\nTracePoint.trace(:b_call) do |tp|\n  1.yield_self\nend\n\ndef foo\n  yield 42\nend\n\nfoo {}\n```\n\n`vm_invoke_iseq_block`と`rb_obj_yield_self`にbreakpointを仕掛けて呼び出される順序を確認。\n\n```\n% gdb $(rbenv which ruby)\nGNU gdb (Gentoo 8.1 p1) 8.1\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later \u003chttp://gnu.org/licenses/gpl.html\u003e\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-pc-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n\u003chttps://bugs.gentoo.org/\u003e.\nFind the GDB manual and other documentation resources online at:\n\u003chttp://www.gnu.org/software/gdb/documentation/\u003e.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from /home/sei/.rbenv/versions/2.5.1/bin/ruby...done.\n(gdb) break vm_invoke_iseq_block if rb_vm_top_self() == calling-\u003erecv\nBreakpoint 1 at 0x1850fd: file vm_insnhelper.c, line 2630.\n(gdb) break rb_obj_yield_self\nBreakpoint 2 at 0x909da: file object.c, line 577.\n(gdb) run --disable-gems -e 'TracePoint.trace(:b_call) {|tp| 1.yield_self }; def foo; yield 42; end; foo\n{}'\nStarting program: /home/sei/.rbenv/versions/2.5.1/bin/ruby --disable-gems -e 'TracePoint.trace(:b_call) {|tp| 1.yield_self }; def foo; yield 42; end; foo {}'\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n[New Thread 0x7ffff7ff6700 (LWP 15626)]\nError in testing breakpoint condition:\nCouldn't get registers: そのようなプロセスはありません.\nAn error occurred while in a function called from GDB.\nEvaluation of the expression containing the function\n(rb_vm_top_self) will be abandoned.\nWhen the function is done executing, GDB will silently stop.\nSelected thread is running.\n(gdb) frame 0\n#0  vm_invoke_iseq_block (ec=0x555555a79258, reg_cfp=0x7ffff7fc5f80, calling=0x7fffffffd8b0,\n    ci=0x555555babf60, is_lambda=0, captured=0x7ffff7fc5fc8) at vm_insnhelper.c:2630\n2630        const rb_iseq_t *iseq = rb_iseq_check(captured-\u003ecode.iseq);\n(gdb) c\nContinuing.\n\nThread 1 \"ruby\" hit Breakpoint 2, rb_obj_yield_self (obj=3) at object.c:577\n577         RETURN_SIZED_ENUMERATOR(obj, 0, 0, rb_obj_size);\n(gdb) frame 0\n#0  rb_obj_yield_self (obj=3) at object.c:577\n577         RETURN_SIZED_ENUMERATOR(obj, 0, 0, rb_obj_size);\n(gdb) c\nContinuing.\n[Thread 0x7ffff7ff6700 (LWP 15626) exited]\n[Inferior 1 (process 15622) exited normally]\n```\n\n見ての通り`vm_invoke_block`が呼ばれてから`rb_obj_yield_self`が呼び出されている。\n\n1. `yield`の引数をスタックに積む\n2. `invokeblock`が呼ばれる\n3. `vm_invoke_block`が呼ばれる\n4. `vm_invoke_iseq_block`が呼ばれる\n5. `vm_push_frame`が呼ばれる(このタイミングでスタックに積んだ引数が捨てられる)\n6. TracePointの`b_call`が呼ばれる\n\n6の段階でISeqを書き換えても5の段階で既に`yield`に渡された値がすてられてしまう。\nなので書き換えるなら4を呼ぶ前にISeqを書き換えないといけない。\n\n6の段階のcontrol frameのスタックを見てみると以下のようになっている。\n0006がyield_selfの呼び出しで、0005がTracePoint作成時に渡したブロック、0004がfooに渡したブロックとなっており、既に制御フレームが積まれているのが分かる。\n\n```\n(gdb) call rb_vmdebug_stack_dump_raw_current()\n-- Control frame information -----------------------------------------------\nc:0006 p:---- s:0021 e:000020 CFUNC  :yield_self\nc:0005 p:0005 s:0017 e:000016 BLOCK  -e:1 [FINISH]\nc:0004 p:0001 s:0013 e:000012 BLOCK  -e:1\nc:0003 p:0004 s:0010 e:000009 METHOD -e:1\nc:0002 p:0029 s:0006 E:002660 EVAL   -e:1 [FINISH]\nc:0001 p:0000 s:0003 E:000460 (none) [FINISH]\n```\n\n## ブロックのISeqをメソッド呼び出し時に取得する\n\n以下のようなコードをgdbで実行して`rb_obj_yield_self`にbreakポイントを仕掛けブロックのISeqを取る方法を確認する。\n\n```rb\nTracePoint.trace(:call) do |tp|\n  1.yield_self\nend\n\ndef foo\n  yield 42\nend\n\nfoo { 42 }\n```\n\nとりあえず止まった\n\n```\n% gdb $(rbenv which ruby)\nGNU gdb (Gentoo 8.1 p1) 8.1\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later \u003chttp://gnu.org/licenses/gpl.html\u003e\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-pc-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n\u003chttps://bugs.gentoo.org/\u003e.\nFind the GDB manual and other documentation resources online at:\n\u003chttp://www.gnu.org/software/gdb/documentation/\u003e.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from /home/sei/.rbenv/versions/2.5.1/bin/ruby...done.\n(gdb) source ~/src/github.com/ruby/ruby/.gdbinit\n(gdb) break rb_obj_yield_self\nBreakpoint 1 at 0x909da: file object.c, line 577.\n(gdb) run --disable-gems -e 'TracePoint.trace(:call) {|tp| 1.yield_self }; def foo; yield 42; end; foo { 42 }\n'\nStarting program: /home/sei/.rbenv/versions/2.5.1/bin/ruby --disable-gems -e 'TracePoint.trace(:call) {|tp| 1.yield_self }; def foo; yield 42; end; foo {}'\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n[New Thread 0x7ffff7ff6700 (LWP 16662)]\n\nThread 1 \"ruby\" hit Breakpoint 1, rb_obj_yield_self (obj=3) at object.c:577\n577         RETURN_SIZED_ENUMERATOR(obj, 0, 0, rb_obj_size);\n```\n\nメソッドは2つ上のフレームのよう\n\n```\n(gdb) call rb_vmdebug_stack_dump_raw_current()\n-- Control frame information -----------------------------------------------\nc:0005 p:---- s:0018 e:000017 CFUNC  :yield_self\nc:0004 p:0005 s:0014 e:000013 BLOCK  -e:1 [FINISH]\nc:0003 p:0001 s:0010 e:000009 METHOD -e:1\nc:0002 p:0029 s:0006 E:002660 EVAL   -e:1 [FINISH]\nc:0001 p:0000 s:0003 E:000460 (none) [FINISH]\n```\n\n今のcontrol frameは`ruby_current_execution_context_ptr`で取れる。[^rb_p]\n\n[^rb_p]: Rubyのオブジェクトをプリント出来るデバッグ用のC関数 https://github.com/ruby/ruby/blob/v2_5_1/io.c#L7655\n\n```\n(gdb) p *(ruby_current_execution_context_ptr-\u003ecfp)\n$40 = {pc = 0x0, sp = 0x7ffff7ec60a0, iseq = 0x0, self = 3, ep = 0x7ffff7ec6098, block_code = 0x0}\n(gdb) call rb_p((ruby_current_execution_context_ptr-\u003ecfp)-\u003eself)\n1\n```\n\ncfpは`--`して伸びる。試しに-したCFPを見ると使われてない空のフレームがあるのが分かる。\n\n```\n(gdb) p *(ruby_current_execution_context_ptr-\u003ecfp - 1)\n$49 = {pc = 0x0, sp = 0x7ffff7ec60b8, iseq = 0x0, self = 3, ep = 0x7ffff7ec60b0, block_code = 0x0}\n(gdb) p *(ruby_current_execution_context_ptr-\u003ecfp - 2)\n$50 = {pc = 0x0, sp = 0x0, iseq = 0x0, self = 0, ep = 0x0, block_code = 0x0}\n(gdb) p *(ruby_current_execution_context_ptr-\u003ecfp - 3)\n$51 = {pc = 0x0, sp = 0x0, iseq = 0x0, self = 0, ep = 0x0, block_code = 0x0}\n```\n\nなので2つ上のメソッド呼び出しのcfpを見るときは`+ 2`すると見れる。\n\n```\n(gdb) p *(ruby_current_execution_context_ptr-\u003ecfp + 2)\n$23 = {pc = 0x555555babee8, sp = 0x7ffff7ec6060, iseq = 0x555555a95d80, self = 93824998023880,\n  ep = 0x7ffff7ec6058, block_code = 0x0}\n```\n\nさきほど見た`vm_invoke_block`でブロックハンドラーを取得していた関数`VM_CF_BLOCK_HANDLER`を呼んでみる。\n\n```\n(gdb) p VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2))\n$52 = 140737353899977\n```\n\n`vm_invoke_block`同様`VM_BH_TO_ISEQ_BLOCK`を呼んで`struct rb_captured_block *`に変換する。\n\n```\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))\n$54 = (const struct rb_captured_block *) 0x7ffff7fc5fc8\n(gdb) p *VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))\n$55 = {self = 93824998023880, ep = 0x555555bb0090, code = {iseq = 0x555555a95c90,\n    ifunc = 0x555555a95c90, val = 93824997743760}}\n```\n\n`vm_invoke_block_iseq`のようにiseqにアクセスしてみる。\n\n```\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.iseq\n$56 = (const rb_iseq_t *) 0x555555a95c90\n(gdb) p *VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.iseq\n$57 = {flags = 28698, reserved1 = 0, body = 0x555555babfb0, aux = {compile_data = 0x8, loader = {\n      obj = 8, index = 0}, trace_events = 8}}\n```\n\nこのままだとよくわからないのでdisasmした結果を見てみる。\n\n```\n(gdb) call rb_p(rb_iseq_disasm(VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.iseq))\n\"== disasm: #\u003cISeq:block in \u003cmain\u003e@-e:1 (1,74)-(1,80)\u003e===================\\n== catch table\\n| catch type: redo   st: 0001 ed: 0003 sp: 0000 cont: 0001\\n| catch type: next   st: 0001 ed: 0003 sp: 0000 cont: 0003\\n|------------------------------------------------------------------------\\n0000 nop                                                              (   1)[Bc]\\n0001 putobject        42[Li]\\n0003 leave            [Br]\\n\"\n```\n\n目的のブロックが取れている。\n\n## ブロックのISeqを書き換える\n\nこの辺のうちflagsはそれぞれの種類の引数があるかどうかをあらわしている。\n\n```\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.iseq-\u003ebody.param\n$70 = {flags = {has_lead = 0, has_opt = 0, has_rest = 0, has_post = 0, has_kw = 0, has_kwrest = 0,\n    has_block = 0, ambiguous_param0 = 0}, size = 0, lead_num = 0, opt_num = 0, rest_start = 0,\n  post_start = 0, post_num = 0, block_start = 0, opt_table = 0x0, keyword = 0x0}\n```\n\n`foo {|x| x }`のような、１つ引数を取るブロックの場合は以下のようになっている。\n\n```\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.iseq-\u003ebody.param\n$71 = {flags = {has_lead = 1, has_opt = 0, has_rest = 0, has_post = 0, has_kw = 0, has_kwrest = 0,\n    has_block = 0, ambiguous_param0 = 1}, size = 1, lead_num = 1, opt_num = 0, rest_start = 0,\n  post_start = 0, post_num = 0, block_start = 0, opt_table = 0x0, keyword = 0x0}\n```\n\nそれに合わせて`flags`の`has_lead`と`size`と`ambiguous_param0`を1に書き換えていく。\n\n```\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.iseq-\u003ebody.param.flags.ambiguous_param0 = 1\n$75 = 1\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.iseq-\u003ebody.param.flags.has_lead = 1\n$76 = 1\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.iseq-\u003ebody.param.size = 1\n$77 = 1\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.iseq-\u003ebody.param\n$78 = {flags = {has_lead = 1, has_opt = 0, has_rest = 0, has_post = 0, has_kw = 0, has_kwrest = 0,\n    has_block = 0, ambiguous_param0 = 1}, size = 1, lead_num = 0, opt_num = 0, rest_start = 0,\n  post_start = 0, post_num = 0, block_start = 0, opt_table = 0x0, keyword = 0x0}\n```\n\nこれでスタックに値が積まれているはず、continueしてみる。\n\n```\n(gdb) c\nContinuing.\n-e:1: [BUG] Stack consistency error (sp: 14, bp: 13)\nruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]\n\n-- Control frame information -----------------------------------------------\nc:0004 p:0004 s:0014 e:000013 BLOCK  -e:1\nc:0003 p:0004 s:0010 e:000009 METHOD -e:1\nc:0002 p:0029 s:0006 E:002680 EVAL   -e:1 [FINISH]\nc:0001 p:0000 s:0003 E:000460 (none) [FINISH]\n```\n\nエラーが出る。`git grep`でエラーメッセージを調べると以下がヒット。\n\n```vm_insnhelper.c\nstatic void\nvm_stack_consistency_error(const rb_execution_context_t *ec,\n\t\t\t   const rb_control_frame_t *cfp,\n\t\t\t   const VALUE *bp)\n{\n    const ptrdiff_t nsp = VM_SP_CNT(ec, cfp-\u003esp);\n    const ptrdiff_t nbp = VM_SP_CNT(ec, bp);\n    static const char stack_consistency_error[] =\n\t\"Stack consistency error (sp: %\"PRIdPTRDIFF\", bp: %\"PRIdPTRDIFF\")\";\n#if defined RUBY_DEVEL\n    VALUE mesg = rb_sprintf(stack_consistency_error, nsp, nbp);\n    rb_str_cat_cstr(mesg, \"\\n\");\n    rb_str_append(mesg, rb_iseq_disasm(cfp-\u003eiseq));\n    rb_exc_fatal(rb_exc_new3(rb_eFatal, mesg));\n#else\n    rb_bug(stack_consistency_error, nsp, nbp);\n#endif\n}\n```\nhttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L3329-L3346\n\n`vm_stack_consistency_error`で探すと`leave`する際にしかこのエラーは出ないよう。\n\n```c:insns.def\n/**\n  @c method/iterator\n  @e return from this scope.\n  @j このスコープから抜ける。\n */\nDEFINE_INSN\nleave\n()\n(VALUE val)\n(VALUE val)\n{\n    if (OPT_CHECKED_RUN) {\n\tconst VALUE *const bp = vm_base_ptr(reg_cfp);\n\tif (reg_cfp-\u003esp != bp) {\n\t    vm_stack_consistency_error(ec, reg_cfp, bp);\n\t}\n    }\n\n\n    RUBY_VM_CHECK_INTS(ec);\n\n\n    if (vm_pop_frame(ec, GET_CFP(), GET_EP())) {\n#if OPT_CALL_THREADED_CODE\n\trb_ec_thread_ptr(ec)-\u003eretval = val;\n\treturn 0;\n#else\n\treturn val;\n#endif\n    }\n    else {\n\tRESTORE_REGS();\n    }\n}\n```\nhttps://github.com/ruby/ruby/blob/v2_5_1/insns.def#L961-L992\n\n`vm_base_ptr`の計算を見てみる\n\n```vm_insnhelper.c\nstatic VALUE *\nvm_base_ptr(const rb_control_frame_t *cfp)\n{\n    const rb_control_frame_t *prev_cfp = RUBY_VM_PREVIOUS_CONTROL_FRAME(cfp);\n\n\n    if (cfp-\u003eiseq \u0026\u0026 VM_FRAME_RUBYFRAME_P(cfp)) {\n\tVALUE *bp = prev_cfp-\u003esp + cfp-\u003eiseq-\u003ebody-\u003elocal_table_size + VM_ENV_DATA_SIZE;\n\tif (cfp-\u003eiseq-\u003ebody-\u003etype == ISEQ_TYPE_METHOD) {\n\t    /* adjust `self' */\n\t    bp += 1;\n\t}\n#if VM_DEBUG_BP_CHECK\n\tif (bp != cfp-\u003ebp_check) {\n\t    fprintf(stderr, \"bp_check: %ld, bp: %ld\\n\",\n\t\t    (long)(cfp-\u003ebp_check - GET_EC()-\u003evm_stack),\n\t\t    (long)(bp - GET_EC()-\u003evm_stack));\n\t    rb_bug(\"vm_base_ptr: unreachable\");\n\t}\n#endif\n\treturn bp;\n    }\n    else {\n\treturn NULL;\n    }\n}\n```\nhttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L1522-L1546\n\n`local_table_size`の書き換えが必要。\n\nもう一度同じところまで進めてlocal_table_sizeも合わせて書き換える\n\n```\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.ise\nq-\u003ebody.local_table_size\n$82 = 0\n(gdb) p VM_BH_TO_ISEQ_BLOCK(VM_CF_BLOCK_HANDLER((ruby_current_execution_context_ptr-\u003ecfp + 2)))-\u003ecode.iseq-\u003ebody.local_table_size = 1\n(gdb) c\nContinuing.\n[Thread 0x7ffff7ff6700 (LWP 20326) exited]\n[Inferior 1 (process 20325) exited normally]\n```\n\n正常終了するようになった\n\n## 積まれた引数を取得する\n\nブロックを書き換えて、CFPに`yield`に渡された値が捨てられずにスタックに積まれたままになった。\n\n`vm_invoke_iseq_block`を呼び出したcfpでは`SET_SP(rsp);`でspが`yield`で積んだとこを指してるので、`vm_invoke_block`を呼び出したcfpのspにアクセスすると取れる。\n\n### スタックの様子\n\nブロック呼び出し時のスタックの様子\n\n```vm_insnhelper.c\nstatic VALUE\nvm_invoke_iseq_block(rb_execution_context_t *ec, rb_control_frame_t *reg_cfp,\n                     struct rb_calling_info *calling, const struct rb_call_info *ci,\n                     int is_lambda, const struct rb_captured_block *captured)\n{\n    const rb_iseq_t *iseq = rb_iseq_check(captured-\u003ecode.iseq);\n    const int arg_size = iseq-\u003ebody-\u003eparam.size;\n    VALUE * const rsp = GET_SP() - calling-\u003eargc;\n    int opt_pc = vm_callee_setup_block_arg(ec, calling, ci, iseq, rsp, is_lambda ? arg_setup_method : arg_setup_block);\n```\n\nこの時点ではこういう感じ、`cfp-\u003esp`が引数の1つ上を指してる。引数の個数が1つなんでrspはspの1つ下\n\n![_home_sei_src_github.com_hanachin_stackgraph_index.html.png](https://qiita-image-store.s3.amazonaws.com/0/2074/7a9bb2c3-c33f-c9ac-1b65-40770ac2c371.png)\n\n\n```vm_insnhelper.c\n\n    SET_SP(rsp);\n```\n\n`SET_SP`呼び出すと`cfp-\u003esp`がここに移動する\n\n![_home_sei_src_github.com_hanachin_stackgraph_index.html (2).png](https://qiita-image-store.s3.amazonaws.com/0/2074/ed8a8742-9de3-2af4-c31b-723040dd61ac.png)\n\nvm_push_frame呼び出す\n\n```vm_insnhelper.c\n\n    vm_push_frame(ec, iseq,\n                  VM_FRAME_MAGIC_BLOCK | (is_lambda ? VM_FRAME_FLAG_LAMBDA : 0),\n                  captured-\u003eself,\n                  VM_GUARDED_PREV_EP(captured-\u003eep), 0,\n                  iseq-\u003ebody-\u003eiseq_encoded + opt_pc,\n                  rsp + arg_size,\n                  iseq-\u003ebody-\u003elocal_table_size - arg_size, iseq-\u003ebody-\u003estack_max);\n\n\n    return Qundef;\n}\n```\nhttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L2623-L2646\n\n`vm_push_frame`では新しいcfpが作られる\n\n```vm_insnhelper.c\nstatic inline rb_control_frame_t *\nvm_push_frame(rb_execution_context_t *ec,\n\t      const rb_iseq_t *iseq,\n\t      VALUE type,\n\t      VALUE self,\n\t      VALUE specval,\n\t      VALUE cref_or_me,\n\t      const VALUE *pc,\n\t      VALUE *sp,\n\t      int local_size,\n\t      int stack_max)\n{\n    rb_control_frame_t *const cfp = ec-\u003ecfp - 1;\n    int i;\n\n\n    vm_check_frame(type, specval, cref_or_me, iseq);\n    VM_ASSERT(local_size \u003e= 0);\n\n\n    /* check stack overflow */\n    CHECK_VM_STACK_OVERFLOW0(cfp, sp, local_size + stack_max);\n\n\n    ec-\u003ecfp = cfp;\n\n\n    /* setup new frame */\n    cfp-\u003epc = (VALUE *)pc;\n    cfp-\u003eiseq = (rb_iseq_t *)iseq;\n    cfp-\u003eself = self;\n    cfp-\u003eblock_code = NULL;\n\n\n    /* setup vm value stack */\n\n\n    /* initialize local variables */\n    for (i=0; i \u003c local_size; i++) {\n\t*sp++ = Qnil;\n    }\n\n\n    /* setup ep with managing data */\n    VM_ASSERT(VM_ENV_DATA_INDEX_ME_CREF == -2);\n    VM_ASSERT(VM_ENV_DATA_INDEX_SPECVAL == -1);\n    VM_ASSERT(VM_ENV_DATA_INDEX_FLAGS   == -0);\n    *sp++ = cref_or_me; /* ep[-2] / Qnil or T_IMEMO(cref) or T_IMEMO(ment) */\n    *sp++ = specval     /* ep[-1] / block handler or prev env ptr */;\n    *sp   = type;       /* ep[-0] / ENV_FLAGS */\n\n\n    cfp-\u003eep = sp;\n    cfp-\u003esp = sp + 1;\n\n\n#if VM_DEBUG_BP_CHECK\n    cfp-\u003ebp_check = sp + 1;\n#endif\n\n\n    if (VMDEBUG == 2) {\n\tSDR();\n    }\n\n\n    return cfp;\n}\n```\nhttps://github.com/ruby/ruby/blob/v2_5_1/vm_insnhelper.c#L199-L255\n\nこのときISeqのブロックの引数が0の時と引数1のときでは`vm_push_frame`に渡されるspの位置がこういう感じでずれている。\n\n![_home_sei_src_github.com_hanachin_stackgraph_index.html (3).png](https://qiita-image-store.s3.amazonaws.com/0/2074/9f0c32c6-69d6-e7d3-2f67-31443d4a8ab0.png)\n\nISeqの引数0のときはこういう感じでspに積まれていた42が上書きされてしまう。\n\n![_home_sei_src_github.com_hanachin_stackgraph_index.html (4).png](https://qiita-image-store.s3.amazonaws.com/0/2074/82728fb7-67b7-07ea-3426-aa13c0d48285.png)\n\nISeqの引数が1のときはこういう感じで上書きされず残っている\n\n![_home_sei_src_github.com_hanachin_stackgraph_index.html (5).png](https://qiita-image-store.s3.amazonaws.com/0/2074/e0c757f1-985b-450b-7df3-63bd9c555edf.png)\n\n### 積まれた引数を取るメソッドを生やす\n\nこういうプログラムだと\n\n```rb\ndef foo\n  yield 42\nend\n\nfoo { it }\n```\n\n`it`メソッド呼び出した際のcontrol frameのスタックはこうなっている\n\n![_home_sei_src_github.com_hanachin_stackgraph_index.html (7).png](https://qiita-image-store.s3.amazonaws.com/0/2074/05851487-e822-d850-fd46-679383ce893a.png)\n\n\nなので`it`で積まれた引数を取るには以下のような感じの2通りのやり方で取れる\n\n```rb\ndef it\n  # ここで1つ上のcfpを参照するとブロックのcfpが取れる、1つ上のcfp-\u003eep - 3にアクセスする\n  # or\n  # ここで2つ上のcfpを参照するとブロックを呼び出したときのcfpが取れる、メソッド呼び出し時のcfp-\u003espにアクセスする\nend\n```\n\n\n![_home_sei_src_github.com_hanachin_stackgraph_index.html (6).png](https://qiita-image-store.s3.amazonaws.com/0/2074/6579e4c0-187e-7061-ca01-3123dbf0c48b.png)\n\n## 実装\n\n`rb_control_frame_t`の型などはrubyのAPIとしてinclude出来るヘッダーが公開されていないので必要な部分をコピーしてくる。\n\nバージョンごとに構造体が違うのでバージョンごとの定義を用意する。\nhttps://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it_20500.h\nhttps://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it_20600.h\n\n`RUBY_API_VERSION`で分岐して各バージョンにあった定義を読み込む。\n\n```thats_it_20600.h\n#if RUBY_API_VERSION_CODE \u003e= 20600\n#include \"thats_it_20600.h\"\n#elif RUBY_API_VERSION_CODE \u003e= 20500\n#include \"thats_it_20500.h\"\n#endif\n```\nhttps://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it.h#L11-L15\n\n現在実行中のcontrol frameはこんな感じでexternしておいて\n\n```c\nextern rb_execution_context_t *ruby_current_execution_context_ptr;\n```\n\nこうやれば取れる\n\n```c\nruby_current_execution_context_ptr-\u003ecfp\n```\n\ncontrol frameやiseq書き換え周りはCで書いている。\nhttps://github.com/hanachin/thats_it/blob/master/ext/thats_it/thats_it.c\n\nTracePoint仕掛けるのはrubyの方が楽に書けそうなのでrubyで書いた。\nhttps://github.com/hanachin/thats_it/blob/master/lib/thats_it.rb\n\n## まとめ\n\nC拡張を書けばTracePointでメソッド呼び出し時に強引にブロックのISeqを取得できる。\nメソッド呼び出し時のタイミングであれば渡されたブロックのISeqを書き換えられる。\nブロックは呼び出されるまで評価されないためISeqを実行する前にISeqを書き換えられる。\n\nマクロだーーー!!!\n\n完\n","coediting":false,"comments_count":0,"created_at":"2018-07-10T16:25:09+09:00","group":null,"id":"8df68325142d46a7fb0b","likes_count":48,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]}],"title":"rubyでgroovyやKotlinのitが使えるthats_it gemを作った","updated_at":"2018-07-18T10:31:09+09:00","url":"https://qiita.com/hanachin_/items/8df68325142d46a7fb0b","user":{"description":"既婚バイ","facebook_id":"seiei.higa","followees_count":166,"followers_count":120,"github_login_name":"hanachin","id":"hanachin_","items_count":55,"linkedin_id":"","location":"Naha, Okinawa, Japan","name":"Seiei Miyagi","organization":"YassLab","permanent_id":2074,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/2074/profile-images/1511092027","twitter_screen_name":"hanachin_","website_url":""},"page_views_count":null}]