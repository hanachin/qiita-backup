[{"rendered_body":"\n\u003ch2\u003e\n\u003cspan id=\"tldr\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#tldr\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eTL;DR\u003c/h2\u003e\n\n\u003cp\u003eGitHub向けの独自の認証情報キャッシュを用意する。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003egit-credential-github-token\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/bin/sh\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e\u003cspan class=\"nv\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps\n\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e\u003cspan class=\"nv\"\u003ehost\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003egithub.com\n\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e\u003cspan class=\"nv\"\u003eusername\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$GITHUB_USERNAME\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e\u003cspan class=\"nv\"\u003epassword\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$GITHUB_TOKEN\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eDockerfileに以下のような内容を追記し、gitでcloneする際https経由でcloneするようにし、httpsの認証に独自の認証情報キャッシュを使うよう設定する。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"Dockerfile\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eDockerfile\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e ruby\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"s\"\u003e /app\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e ./git-credential-github-token /usr/local/bin\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003egit config \u003cspan class=\"nt\"\u003e--global\u003c/span\u003e url.\u003cspan class=\"s2\"\u003e\"https://github.com/YOUR_ORG_NAME/\"\u003c/span\u003e.insteadOf ssh://git@github.com/YOUR_ORG_NAME/ \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e  \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git config \u003cspan class=\"nt\"\u003e--global\u003c/span\u003e credential.helper github-token\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eGitHubでrepo権限を持ったPersonal Access Tokenを発行する。\u003cbr\u003e\n\u003ca href=\"https://github.com/settings/tokens\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/settings/tokens\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e以下のように環境変数でユーザー名とPersonal Access Tokenを渡して実行。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e$ docker build .\n$ docker run -it -e GITHUB_USERNAME=YOUR_USER_NAME -e GITHUB_TOKEN=YOUR_GITHUB_TOKEN -v .:/app IMAGE bash\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ebundle install\u003c/code\u003e/\u003ccode\u003enpm install\u003c/code\u003eする\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"githubのprivate-repositoryをcloneする際sshではなくhttpsを使う\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#github%E3%81%AEprivate-repository%E3%82%92clone%E3%81%99%E3%82%8B%E9%9A%9Bssh%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%8Fhttps%E3%82%92%E4%BD%BF%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGitHubのprivate repositoryをcloneする際sshではなくhttpsを使う\u003c/h2\u003e\n\n\u003cp\u003e例えば\u003ccode\u003eGemfile\u003c/code\u003eに以下のように\u003ccode\u003egit\u003c/code\u003eオプションが指定されていることがあります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"rb\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003egem\u003c/span\u003e \u003cspan class=\"ss\"\u003e:your_gem_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003egit: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'ssh://git@github.com/YOUR_ORG_NAME/your_gem_name.git'\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003esshを使うとGitHubで使っている鍵をDockerコンテナーに渡さないと\u003ccode\u003ebundle install\u003c/code\u003e出来ません。\u003cbr\u003e\n鍵にパスフレーズがかかっていると\u003ccode\u003ebundle install\u003c/code\u003e時にパスフレーズ入力が必要になり不便です。\u003c/p\u003e\n\n\u003cp\u003e回避するために色々やりかたがあります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003esshをつかわない\u003c/li\u003e\n\u003cli\u003eパスフレーズがない鍵をGitHubに登録して使う\u003c/li\u003e\n\u003cli\u003edocker containerを立ててそこに\u003ccode\u003essh -A\u003c/code\u003eして開発\u003c/li\u003e\n\u003cli\u003essh-agentのコンテナを立てておきそこから情報をもらう e.g. \u003ca href=\"https://github.com/nardeas/docker-ssh-agent\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/nardeas/docker-ssh-agent\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eここではsshをつかわない方向で進めていきます。\u003cbr\u003e\nsshをつかわない方法はいくつかあります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003egitの設定を上書きして常に\u003ccode\u003ehttps\u003c/code\u003eを使うようにする\u003c/li\u003e\n\u003cli\u003eGemfileの\u003ccode\u003egit\u003c/code\u003eオプションを書き換える\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eデプロイの都合などでなるべく\u003ccode\u003eGemfile\u003c/code\u003eを変更したくない場合、gitの設定を上書きして常に\u003ccode\u003ehttps\u003c/code\u003eを使うようにするのがお手軽です。\u003c/p\u003e\n\n\u003cp\u003eDockerfileに以下のコマンドを追加します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e$ git config --global url.\"https://github.com/YOUR_ORG_NAME/\".insteadOf ssh://git@github.com/YOUR_ORG_NAME/\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこのコマンドを実行すると以下のような設定ファイルが作成されます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"ini\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e~/.gitconfig\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nn\"\u003e[url \"https://github.com/YOUR_ORG_NAME/\"]\u003c/span\u003e\n        \u003cspan class=\"py\"\u003einsteadOf\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003essh://git@github.com/YOUR_ORG_NAME/\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの設定を行うとGitHubのYOUR_ORG_NAME以下のプライベートなリポジトリをcloneする際に、常にhttpsが使われるようになります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"git-config---global-credentialhelper-github-token\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#git-config---global-credentialhelper-github-token\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003egit config --global credential.helper github-token\u003c/h2\u003e\n\n\u003cp\u003eprivateリポジトリをcloneする場合、GitHubではユーザーの認証が必要です。\u003cbr\u003e\nprivateなgemファイルやnpmパッケージをインストールする際に以下のようなプロンプトが出ます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eUsername for 'https://github.com': \n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e手入力は面倒です。入力する手間を省くため独自の認証情報キャッシュを使って認証の手間を省きます。\u003c/p\u003e\n\n\u003cp\u003e参考: \u003ca href=\"https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%81%AE%E4%BF%9D%E5%AD%98\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGit - 認証情報の保存\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e今回は以下のような認証情報キャッシュを作成します。\u003cbr\u003e\n環境変数の\u003ccode\u003eGITHUB_USERNAME\u003c/code\u003e/\u003ccode\u003eGITHUB_TOKEN\u003c/code\u003eを用いて認証を行います。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003egit-credential-github-token\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/bin/sh\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e\u003cspan class=\"nv\"\u003eprotocol\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps\n\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e\u003cspan class=\"nv\"\u003ehost\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003egithub.com\n\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e\u003cspan class=\"nv\"\u003eusername\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$GITHUB_USERNAME\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho \u003c/span\u003e\u003cspan class=\"nv\"\u003epassword\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$GITHUB_TOKEN\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eパスが通っているところに\u003ccode\u003egit-credential-github-token\u003c/code\u003eを置いて、以下のようなコマンドを叩いて\u003ccode\u003e~/.gitconfig\u003c/code\u003eに設定を追加します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e$ git config --global credential.helper github-token\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"ini\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e~/.gitconfig\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nn\"\u003e[credential]\u003c/span\u003e\n        \u003cspan class=\"py\"\u003ehelper\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003egithub-token\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"githubの認証に使うトークンを発行する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#github%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%81%AB%E4%BD%BF%E3%81%86%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%82%92%E7%99%BA%E8%A1%8C%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGitHubの認証に使うトークンを発行する\u003c/h2\u003e\n\n\u003cp\u003eGitHubでrepo権限を持ったPersonal Access Tokenを発行します。\u003cbr\u003e\n\u003ca href=\"https://github.com/settings/tokens\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/settings/tokens\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"環境変数経由でgithubの認証情報を渡す\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E7%B5%8C%E7%94%B1%E3%81%A7github%E3%81%AE%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%82%92%E6%B8%A1%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e環境変数経由でGitHubの認証情報を渡す\u003c/h2\u003e\n\n\u003cp\u003e独自の認証情報キャッシュで使っている環境変数に自身のユーザー名と先程作成したPersonal Access Token設定してコンテナーを起動します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e$ docker run -it -e GITHUB_USERNAME=YOUR_USER_NAME -e GITHUB_TOKEN=YOUR_GITHUB_TOKEN -v .:/app IMAGE bash\nroot@04d6eff95b41:/app# bundle install\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eユーザー名やトークンがhistoryやrcに残るのが嫌なので、僕は\u003ccode\u003eenvchain\u003c/code\u003eを使って環境変数を設定しています。\u003cbr\u003e\n\u003ca href=\"https://github.com/sorah/envchain\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/sorah/envchain\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e$ envchain --set myapp GITHUB_USERNAME GITHUB_TOKEN\n$ envchain myapp docker run -it -e GITHUB_USERNAME=$GITHUB_USERNAME -e GITHUB_TOKEN=$GITHUB_TOKEN -v .:/app IMAGE bash\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"実際のdocker-composeymlの例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AEdocker-composeyml%E3%81%AE%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実際の\u003ccode\u003edocker-compose.yml\u003c/code\u003eの例\u003c/h2\u003e\n\n\u003cp\u003eこういう感じです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003edocker-compose.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"na\"\u003eversion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"s\"\u003e3'\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003eservices\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eweb\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e.\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003esh -c 'bundle check \u0026amp;\u0026amp; bundle exec rails s -b 0.0.0.0'\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eenvironment\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eGITHUB_USERNAME\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e$GITHUB_USERNAME\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eGITHUB_TOKEN\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e$GITHUB_TOKEN\u003c/span\u003e\n    \u003cspan class=\"na\"\u003evolumes\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e.:/app\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003egem-data:/usr/local/bundle\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003enpm-data:/app/node_modules\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003evolumes\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003egem-data\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003enpm-data\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eup\u003c/code\u003eする前に以下のような感じで\u003ccode\u003ebundle install\u003c/code\u003e/\u003ccode\u003enpm install\u003c/code\u003eしてます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e$ envchain myapp docker-compose build\n$ envchain myapp docker-compose run --rm web bash\nroot@04d6eff95b41:/app# bundle install\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n","body":"## TL;DR\n\nGitHub向けの独自の認証情報キャッシュを用意する。\n\n```sh:git-credential-github-token\n#!/bin/sh\n\necho protocol=https\necho host=github.com\necho username=$GITHUB_USERNAME\necho password=$GITHUB_TOKEN\n```\n\nDockerfileに以下のような内容を追記し、gitでcloneする際https経由でcloneするようにし、httpsの認証に独自の認証情報キャッシュを使うよう設定する。\n\n```Dockerfile:Dockerfile\nFROM ruby\n\nWORKDIR /app\n\nCOPY ./git-credential-github-token /usr/local/bin\nRUN git config --global url.\"https://github.com/YOUR_ORG_NAME/\".insteadOf ssh://git@github.com/YOUR_ORG_NAME/ \\\n  \u0026\u0026 git config --global credential.helper github-token\n```\n\nGitHubでrepo権限を持ったPersonal Access Tokenを発行する。\nhttps://github.com/settings/tokens\n\n以下のように環境変数でユーザー名とPersonal Access Tokenを渡して実行。\n\n```\n$ docker build .\n$ docker run -it -e GITHUB_USERNAME=YOUR_USER_NAME -e GITHUB_TOKEN=YOUR_GITHUB_TOKEN -v .:/app IMAGE bash\n```\n\n`bundle install`/`npm install`する\n\n## GitHubのprivate repositoryをcloneする際sshではなくhttpsを使う\n\n例えば`Gemfile`に以下のように`git`オプションが指定されていることがあります。\n\n```rb\ngem :your_gem_name, git: 'ssh://git@github.com/YOUR_ORG_NAME/your_gem_name.git'\n```\n\nsshを使うとGitHubで使っている鍵をDockerコンテナーに渡さないと`bundle install`出来ません。\n鍵にパスフレーズがかかっていると`bundle install`時にパスフレーズ入力が必要になり不便です。\n\n回避するために色々やりかたがあります。\n\n- sshをつかわない\n- パスフレーズがない鍵をGitHubに登録して使う\n- docker containerを立ててそこに`ssh -A`して開発\n- ssh-agentのコンテナを立てておきそこから情報をもらう e.g. https://github.com/nardeas/docker-ssh-agent\n\nここではsshをつかわない方向で進めていきます。\nsshをつかわない方法はいくつかあります。\n\n- gitの設定を上書きして常に`https`を使うようにする\n- Gemfileの`git`オプションを書き換える\n\nデプロイの都合などでなるべく`Gemfile`を変更したくない場合、gitの設定を上書きして常に`https`を使うようにするのがお手軽です。\n\nDockerfileに以下のコマンドを追加します。\n\n```\n$ git config --global url.\"https://github.com/YOUR_ORG_NAME/\".insteadOf ssh://git@github.com/YOUR_ORG_NAME/\n```\n\nこのコマンドを実行すると以下のような設定ファイルが作成されます。\n\n```~/.gitconfig\n[url \"https://github.com/YOUR_ORG_NAME/\"]\n        insteadOf = ssh://git@github.com/YOUR_ORG_NAME/\n```\n\nこの設定を行うとGitHubのYOUR_ORG_NAME以下のプライベートなリポジトリをcloneする際に、常にhttpsが使われるようになります。\n\n## git config --global credential.helper github-token\n\nprivateリポジトリをcloneする場合、GitHubではユーザーの認証が必要です。\nprivateなgemファイルやnpmパッケージをインストールする際に以下のようなプロンプトが出ます。\n\n```\nUsername for 'https://github.com': \n```\n\n手入力は面倒です。入力する手間を省くため独自の認証情報キャッシュを使って認証の手間を省きます。\n\n参考: [Git - 認証情報の保存](https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%81%AE%E4%BF%9D%E5%AD%98)\n\n今回は以下のような認証情報キャッシュを作成します。\n環境変数の`GITHUB_USERNAME`/`GITHUB_TOKEN`を用いて認証を行います。\n\n```sh:git-credential-github-token\n#!/bin/sh\n\necho protocol=https\necho host=github.com\necho username=$GITHUB_USERNAME\necho password=$GITHUB_TOKEN\n```\n\nパスが通っているところに`git-credential-github-token`を置いて、以下のようなコマンドを叩いて`~/.gitconfig`に設定を追加します。\n\n```\n$ git config --global credential.helper github-token\n```\n\n```~/.gitconfig\n[credential]\n        helper = github-token\n```\n\n## GitHubの認証に使うトークンを発行する\n\nGitHubでrepo権限を持ったPersonal Access Tokenを発行します。\nhttps://github.com/settings/tokens\n\n\n## 環境変数経由でGitHubの認証情報を渡す\n\n独自の認証情報キャッシュで使っている環境変数に自身のユーザー名と先程作成したPersonal Access Token設定してコンテナーを起動します。\n\n```\n$ docker run -it -e GITHUB_USERNAME=YOUR_USER_NAME -e GITHUB_TOKEN=YOUR_GITHUB_TOKEN -v .:/app IMAGE bash\nroot@04d6eff95b41:/app# bundle install\n```\n\nユーザー名やトークンがhistoryやrcに残るのが嫌なので、僕は`envchain`を使って環境変数を設定しています。\nhttps://github.com/sorah/envchain\n\n```\n$ envchain --set myapp GITHUB_USERNAME GITHUB_TOKEN\n$ envchain myapp docker run -it -e GITHUB_USERNAME=$GITHUB_USERNAME -e GITHUB_TOKEN=$GITHUB_TOKEN -v .:/app IMAGE bash\n```\n\n## 実際の`docker-compose.yml`の例\n\nこういう感じです。\n\n```docker-compose.yml\nversion: '3'\n\nservices:\n  web:\n    build: .\n    command: sh -c 'bundle check \u0026\u0026 bundle exec rails s -b 0.0.0.0'\n    environment:\n      GITHUB_USERNAME: $GITHUB_USERNAME\n      GITHUB_TOKEN: $GITHUB_TOKEN\n    volumes:\n      - .:/app\n      - gem-data:/usr/local/bundle\n      - npm-data:/app/node_modules\n\nvolumes:\n  gem-data:\n  npm-data:\n```\n\n`up`する前に以下のような感じで`bundle install`/`npm install`してます。\n\n```\n$ envchain myapp docker-compose build\n$ envchain myapp docker-compose run --rm web bash\nroot@04d6eff95b41:/app# bundle install\n```\n","coediting":false,"comments_count":0,"created_at":"2017-11-07T15:59:55+09:00","group":null,"id":"a2eeba149bb08b4ace76","likes_count":18,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]},{"name":"docker","versions":[]},{"name":"docker-compose","versions":[]}],"title":"開発環境用のDockerでprivate repositoryにあるgemやnpmパッケージをインストールする","updated_at":"2017-11-07T15:59:55+09:00","url":"https://qiita.com/hanachin_/items/a2eeba149bb08b4ace76","user":{"description":"既婚バイ","facebook_id":"seiei.higa","followees_count":166,"followers_count":120,"github_login_name":"hanachin","id":"hanachin_","items_count":55,"linkedin_id":"","location":"Naha, Okinawa, Japan","name":"Seiei Miyagi","organization":"YassLab","permanent_id":2074,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/2074/profile-images/1511092027","twitter_screen_name":"hanachin_","website_url":""},"page_views_count":null}]